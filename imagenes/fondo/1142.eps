%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: g_bw_007_003.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Zydd
%%CreationDate: 6/7/2017
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 3
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2017-06-07T18:03:37+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBaAFoAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABaAAAAAEA&#xA;AQFoAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9UKqqoVQFVRRVGwAHYYq&#xA;3irsVUre1tbZGS2hSBHdpXWNQgLyMWdyFA+JmJJPc4qq4q7FUPFpunQ31xfw2sMd9dKiXV2karLK&#xA;sVRGskgHJgnI8anbFURirsVQN1oWi3eqWeq3NjBPqenh1sb2SNWmhEoo4jcjkvIbGmKo7FXYqlfm&#xA;Lyt5c8yWcdlr+m2+p2kUqzxw3KCRVlSvFgD3oSPltiqaYq7FUFrWi6VrelXOk6tbJeadeIYrm2lF&#xA;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&#xA;NOtAC7kFmZmNFRFG7Mx2AGKv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2017-06-07T18:03:38+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-06-07T18:03:38+02:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:6F7344D19A4BE711B7FCC9AECD69AEEF</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:6F7344D19A4BE711B7FCC9AECD69AEEF</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:6F7344D19A4BE711B7FCC9AECD69AEEF</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6F7344D19A4BE711B7FCC9AECD69AEEF</stEvt:instanceID>
                  <stEvt:when>2017-06-07T18:03:38+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
gsave
0 0 mo
1000 0 li
1000 1000 li
0 1000 li
0 0 li
cp
clp
47.6958 50.5762 mo
47.312 50.1919 47.312 49.8081 47.6958 49.4238 cv
49.4238 47.6958 li
49.8081 47.312 50.1919 47.312 50.5762 47.6958 cv
52.3042 49.4238 li
52.688 49.8081 52.688 50.1919 52.3042 50.5762 cv
50.5762 52.3042 li
50.1919 52.688 49.8081 52.688 49.4238 52.3042 cv
47.6958 50.5762 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
46.7744 150.807 mo
46.2368 150.269 46.2368 149.731 46.7744 149.193 cv
49.1934 146.774 li
49.7314 146.237 50.2686 146.237 50.8066 146.774 cv
53.2256 149.193 li
53.7632 149.731 53.7632 150.269 53.2256 150.807 cv
50.8066 153.226 li
50.2686 153.763 49.7314 153.763 49.1934 153.226 cv
46.7744 150.807 li
cp
f
45.853 251.037 mo
45.1616 250.346 45.1616 249.654 45.853 248.963 cv
48.9634 245.853 li
49.6543 245.162 50.3457 245.162 51.0366 245.853 cv
54.147 248.963 li
54.8384 249.654 54.8384 250.346 54.147 251.037 cv
51.0366 254.147 li
50.3457 254.838 49.6543 254.838 48.9634 254.147 cv
45.853 251.037 li
cp
f
44.9312 351.267 mo
44.0864 350.422 44.0864 349.578 44.9312 348.733 cv
48.7329 344.931 li
49.5776 344.086 50.4224 344.086 51.2671 344.931 cv
55.0688 348.733 li
55.9136 349.578 55.9136 350.422 55.0688 351.267 cv
51.2671 355.069 li
50.4224 355.914 49.5776 355.914 48.7329 355.069 cv
44.9312 351.267 li
cp
f
44.0098 451.498 mo
43.0112 450.499 43.0112 449.501 44.0098 448.502 cv
48.5024 444.01 li
49.501 443.011 50.499 443.011 51.4976 444.01 cv
55.9902 448.502 li
56.9888 449.501 56.9888 450.499 55.9902 451.498 cv
51.4976 455.99 li
50.499 456.989 49.501 456.989 48.5024 455.99 cv
44.0098 451.498 li
cp
f
43.0879 551.728 mo
41.936 550.576 41.936 549.424 43.0879 548.272 cv
48.272 543.088 li
49.4238 541.936 50.5762 541.936 51.728 543.088 cv
56.9121 548.272 li
58.064 549.424 58.064 550.576 56.9121 551.728 cv
51.728 556.912 li
50.5762 558.064 49.4238 558.064 48.272 556.912 cv
43.0879 551.728 li
cp
f
42.1665 651.958 mo
40.8608 650.652 40.8608 649.348 42.1665 648.042 cv
48.0415 642.166 li
49.3472 640.86 50.6528 640.86 51.9585 642.166 cv
57.8335 648.042 li
59.1392 649.348 59.1392 650.652 57.8335 651.958 cv
51.9585 657.834 li
50.6528 659.14 49.3472 659.14 48.0415 657.834 cv
42.1665 651.958 li
cp
f
41.2446 752.188 mo
39.7856 750.729 39.7856 749.271 41.2446 747.812 cv
47.811 741.245 li
49.2705 739.785 50.7295 739.785 52.189 741.245 cv
58.7554 747.812 li
60.2144 749.271 60.2144 750.729 58.7554 752.188 cv
52.189 758.755 li
50.7295 760.215 49.2705 760.215 47.811 758.755 cv
41.2446 752.188 li
cp
f
40.3232 852.419 mo
38.7104 850.807 38.7104 849.193 40.3232 847.581 cv
47.5806 840.323 li
49.1934 838.71 50.8066 838.71 52.4194 840.323 cv
59.6768 847.581 li
61.2896 849.193 61.2896 850.807 59.6768 852.419 cv
52.4194 859.677 li
50.8066 861.29 49.1934 861.29 47.5806 859.677 cv
40.3232 852.419 li
cp
f
39.4014 952.649 mo
37.6353 950.883 37.6353 949.117 39.4014 947.351 cv
47.3506 939.401 li
49.1167 937.635 50.8833 937.635 52.6494 939.401 cv
60.5986 947.351 li
62.3647 949.117 62.3647 950.883 60.5986 952.649 cv
52.6494 960.599 li
50.8833 962.365 49.1167 962.365 47.3506 960.599 cv
39.4014 952.649 li
cp
f
146.472 50.8818 mo
145.884 50.2939 145.884 49.7061 146.472 49.1182 cv
149.118 46.4722 li
149.706 45.8838 150.294 45.8838 150.882 46.4722 cv
153.528 49.1182 li
154.116 49.7061 154.116 50.2939 153.528 50.8818 cv
150.882 53.5278 li
150.294 54.1162 149.706 54.1162 149.118 53.5278 cv
146.472 50.8818 li
cp
f
145.061 151.235 mo
144.238 150.412 144.238 149.588 145.061 148.765 cv
148.765 145.061 li
149.588 144.238 150.412 144.238 151.235 145.061 cv
154.939 148.765 li
155.762 149.588 155.762 150.412 154.939 151.235 cv
151.235 154.939 li
150.412 155.762 149.588 155.762 148.765 154.939 cv
145.061 151.235 li
cp
f
143.649 251.587 mo
142.591 250.529 142.591 249.471 143.649 248.413 cv
148.413 243.649 li
149.471 242.591 150.529 242.591 151.587 243.649 cv
156.351 248.413 li
157.409 249.471 157.409 250.529 156.351 251.587 cv
151.587 256.351 li
150.529 257.409 149.471 257.409 148.413 256.351 cv
143.649 251.587 li
cp
f
142.238 351.94 mo
140.945 350.647 140.945 349.353 142.238 348.06 cv
148.06 342.238 li
149.353 340.945 150.647 340.945 151.94 342.238 cv
157.762 348.06 li
159.055 349.353 159.055 350.647 157.762 351.94 cv
151.94 357.762 li
150.647 359.055 149.353 359.055 148.06 357.762 cv
142.238 351.94 li
cp
f
140.827 452.293 mo
139.298 450.765 139.298 449.235 140.827 447.707 cv
147.707 440.827 li
149.235 439.299 150.765 439.299 152.293 440.827 cv
159.173 447.707 li
160.702 449.235 160.702 450.765 159.173 452.293 cv
152.293 459.173 li
150.765 460.701 149.235 460.701 147.707 459.173 cv
140.827 452.293 li
cp
f
139.416 552.646 mo
137.652 550.882 137.652 549.118 139.416 547.354 cv
147.354 539.416 li
149.118 537.652 150.882 537.652 152.646 539.416 cv
160.584 547.354 li
162.348 549.118 162.348 550.882 160.584 552.646 cv
152.646 560.584 li
150.882 562.348 149.118 562.348 147.354 560.584 cv
139.416 552.646 li
cp
f
138.005 652.999 mo
136.005 651 136.005 649 138.005 647.001 cv
147.001 638.005 li
149 636.006 151 636.006 152.999 638.005 cv
161.995 647.001 li
163.995 649 163.995 651 161.995 652.999 cv
152.999 661.995 li
151 663.994 149 663.994 147.001 661.995 cv
138.005 652.999 li
cp
f
136.594 753.352 mo
134.359 751.117 134.359 748.883 136.594 746.648 cv
146.648 736.594 li
148.883 734.359 151.117 734.359 153.352 736.594 cv
163.406 746.648 li
165.641 748.883 165.641 751.117 163.406 753.352 cv
153.352 763.406 li
151.117 765.641 148.883 765.641 146.648 763.406 cv
136.594 753.352 li
cp
f
135.183 853.704 mo
132.713 851.234 132.713 848.766 135.183 846.296 cv
146.295 835.183 li
148.765 832.713 151.235 832.713 153.705 835.183 cv
164.817 846.296 li
167.287 848.766 167.287 851.234 164.817 853.704 cv
153.705 864.817 li
151.235 867.287 148.765 867.287 146.295 864.817 cv
135.183 853.704 li
cp
f
133.771 954.058 mo
131.066 951.353 131.066 948.647 133.771 945.942 cv
145.943 933.771 li
148.647 931.066 151.353 931.066 154.057 933.771 cv
166.229 945.942 li
168.934 948.647 168.934 951.353 166.229 954.058 cv
154.057 966.229 li
151.353 968.934 148.647 968.934 145.943 966.229 cv
133.771 954.058 li
cp
f
245.248 51.188 mo
244.456 50.396 244.456 49.604 245.248 48.812 cv
248.812 45.248 li
249.604 44.4561 250.396 44.4561 251.188 45.248 cv
254.752 48.812 li
255.544 49.604 255.544 50.396 254.752 51.188 cv
251.188 54.752 li
250.396 55.5439 249.604 55.5439 248.812 54.752 cv
245.248 51.188 li
cp
f
243.347 151.663 mo
242.238 150.554 242.238 149.446 243.347 148.337 cv
248.337 143.347 li
249.446 142.238 250.554 142.238 251.663 143.347 cv
256.653 148.337 li
257.762 149.446 257.762 150.554 256.653 151.663 cv
251.663 156.653 li
250.554 157.762 249.446 157.762 248.337 156.653 cv
243.347 151.663 li
cp
f
241.446 252.139 mo
240.021 250.713 240.021 249.287 241.446 247.861 cv
247.862 241.446 li
249.287 240.021 250.713 240.021 252.138 241.446 cv
258.554 247.861 li
259.979 249.287 259.979 250.713 258.554 252.139 cv
252.138 258.554 li
250.713 259.979 249.287 259.979 247.862 258.554 cv
241.446 252.139 li
cp
f
239.545 352.614 mo
237.803 350.871 237.803 349.129 239.545 347.386 cv
247.386 339.545 li
249.129 337.803 250.871 337.803 252.614 339.545 cv
260.455 347.386 li
262.197 349.129 262.197 350.871 260.455 352.614 cv
252.614 360.455 li
250.871 362.197 249.129 362.197 247.386 360.455 cv
239.545 352.614 li
cp
f
237.645 453.089 mo
235.585 451.029 235.585 448.971 237.645 446.911 cv
246.911 437.645 li
248.97 435.586 251.03 435.586 253.089 437.645 cv
262.355 446.911 li
264.415 448.971 264.415 451.029 262.355 453.089 cv
253.089 462.355 li
251.03 464.414 248.97 464.414 246.911 462.355 cv
237.645 453.089 li
cp
f
235.744 553.564 mo
233.368 551.188 233.368 548.812 235.744 546.436 cv
246.436 535.744 li
248.812 533.368 251.188 533.368 253.564 535.744 cv
264.256 546.436 li
266.632 548.812 266.632 551.188 264.256 553.564 cv
253.564 564.256 li
251.188 566.632 248.812 566.632 246.436 564.256 cv
235.744 553.564 li
cp
f
233.843 654.039 mo
231.15 651.347 231.15 648.653 233.843 645.961 cv
245.961 633.843 li
248.654 631.15 251.346 631.15 254.039 633.843 cv
266.157 645.961 li
268.85 648.653 268.85 651.347 266.157 654.039 cv
254.039 666.157 li
251.346 668.85 248.654 668.85 245.961 666.157 cv
233.843 654.039 li
cp
f
231.942 754.515 mo
228.933 751.505 228.933 748.495 231.942 745.485 cv
245.485 731.942 li
248.495 728.933 251.505 728.933 254.515 731.942 cv
268.058 745.485 li
271.067 748.495 271.067 751.505 268.058 754.515 cv
254.515 768.058 li
251.505 771.067 248.495 771.067 245.485 768.058 cv
231.942 754.515 li
cp
f
230.042 854.989 mo
226.715 851.663 226.715 848.337 230.042 845.011 cv
245.01 830.042 li
248.337 826.715 251.663 826.715 254.99 830.042 cv
269.958 845.011 li
273.285 848.337 273.285 851.663 269.958 854.989 cv
254.99 869.958 li
251.663 873.285 248.337 873.285 245.01 869.958 cv
230.042 854.989 li
cp
f
228.141 955.465 mo
224.498 951.821 224.498 948.179 228.141 944.535 cv
244.535 928.141 li
248.178 924.498 251.822 924.498 255.465 928.141 cv
271.859 944.535 li
275.502 948.179 275.502 951.821 271.859 955.465 cv
255.465 971.859 li
251.822 975.502 248.178 975.502 244.535 971.859 cv
228.141 955.465 li
cp
f
344.024 51.4941 mo
343.028 50.498 343.028 49.502 344.024 48.5059 cv
348.506 44.0239 li
349.502 43.0278 350.498 43.0278 351.494 44.0239 cv
355.976 48.5059 li
356.972 49.502 356.972 50.498 355.976 51.4941 cv
351.494 55.9761 li
350.498 56.9722 349.502 56.9722 348.506 55.9761 cv
344.024 51.4941 li
cp
f
341.634 152.092 mo
340.239 150.697 340.239 149.303 341.634 147.908 cv
347.908 141.634 li
349.303 140.239 350.697 140.239 352.092 141.634 cv
358.366 147.908 li
359.761 149.303 359.761 150.697 358.366 152.092 cv
352.092 158.366 li
350.697 159.761 349.303 159.761 347.908 158.366 cv
341.634 152.092 li
cp
f
339.243 252.689 mo
337.45 250.896 337.45 249.104 339.243 247.311 cv
347.311 239.243 li
349.104 237.45 350.896 237.45 352.689 239.243 cv
360.757 247.311 li
362.55 249.104 362.55 250.896 360.757 252.689 cv
352.689 260.757 li
350.896 262.55 349.104 262.55 347.311 260.757 cv
339.243 252.689 li
cp
f
336.853 353.287 mo
334.661 351.096 334.661 348.904 336.853 346.713 cv
346.713 336.853 li
348.904 334.662 351.096 334.662 353.287 336.853 cv
363.147 346.713 li
365.339 348.904 365.339 351.096 363.147 353.287 cv
353.287 363.147 li
351.096 365.338 348.904 365.338 346.713 363.147 cv
336.853 353.287 li
cp
f
334.463 453.885 mo
331.873 451.295 331.873 448.705 334.463 446.115 cv
346.115 434.463 li
348.705 431.873 351.295 431.873 353.885 434.463 cv
365.537 446.115 li
368.127 448.705 368.127 451.295 365.537 453.885 cv
353.885 465.537 li
351.295 468.127 348.705 468.127 346.115 465.537 cv
334.463 453.885 li
cp
f
332.072 554.482 mo
329.084 551.494 329.084 548.506 332.072 545.518 cv
345.518 532.072 li
348.506 529.084 351.494 529.084 354.482 532.072 cv
367.928 545.518 li
370.916 548.506 370.916 551.494 367.928 554.482 cv
354.482 567.928 li
351.494 570.916 348.506 570.916 345.518 567.928 cv
332.072 554.482 li
cp
f
329.682 655.08 mo
326.295 651.693 326.295 648.307 329.682 644.92 cv
344.92 629.682 li
348.307 626.295 351.693 626.295 355.08 629.682 cv
370.318 644.92 li
373.705 648.307 373.705 651.693 370.318 655.08 cv
355.08 670.318 li
351.693 673.705 348.307 673.705 344.92 670.318 cv
329.682 655.08 li
cp
f
327.291 755.677 mo
323.507 751.893 323.507 748.107 327.291 744.323 cv
344.323 727.291 li
348.107 723.507 351.893 723.507 355.677 727.291 cv
372.709 744.323 li
376.493 748.107 376.493 751.893 372.709 755.677 cv
355.677 772.709 li
351.893 776.493 348.107 776.493 344.323 772.709 cv
327.291 755.677 li
cp
f
324.9 856.274 mo
320.718 852.092 320.718 847.908 324.9 843.726 cv
343.726 824.9 li
347.908 820.718 352.092 820.718 356.274 824.9 cv
375.1 843.726 li
379.282 847.908 379.282 852.092 375.1 856.274 cv
356.274 875.1 li
352.092 879.282 347.908 879.282 343.726 875.1 cv
324.9 856.274 li
cp
f
322.511 956.872 mo
317.929 952.291 317.929 947.709 322.511 943.128 cv
343.128 922.511 li
347.709 917.929 352.291 917.929 356.872 922.511 cv
377.489 943.128 li
382.071 947.709 382.071 952.291 377.489 956.872 cv
356.872 977.489 li
352.291 982.071 347.709 982.071 343.128 977.489 cv
322.511 956.872 li
cp
f
442.8 51.7998 mo
441.6 50.6001 441.6 49.3999 442.8 48.2002 cv
448.2 42.7998 li
449.4 41.6001 450.6 41.6001 451.8 42.7998 cv
457.2 48.2002 li
458.4 49.3999 458.4 50.6001 457.2 51.7998 cv
451.8 57.2002 li
450.6 58.3999 449.4 58.3999 448.2 57.2002 cv
442.8 51.7998 li
cp
f
439.92 152.52 mo
438.24 150.84 438.24 149.16 439.92 147.48 cv
447.48 139.92 li
449.16 138.24 450.84 138.24 452.52 139.92 cv
460.08 147.48 li
461.76 149.16 461.76 150.84 460.08 152.52 cv
452.52 160.08 li
450.84 161.76 449.16 161.76 447.48 160.08 cv
439.92 152.52 li
cp
f
437.04 253.24 mo
434.88 251.08 434.88 248.92 437.04 246.76 cv
446.76 237.04 li
448.92 234.88 451.08 234.88 453.24 237.04 cv
462.96 246.76 li
465.12 248.92 465.12 251.08 462.96 253.24 cv
453.24 262.96 li
451.08 265.12 448.92 265.12 446.76 262.96 cv
437.04 253.24 li
cp
f
434.16 353.96 mo
431.52 351.32 431.52 348.68 434.16 346.04 cv
446.04 334.16 li
448.68 331.52 451.32 331.52 453.96 334.16 cv
465.84 346.04 li
468.48 348.68 468.48 351.32 465.84 353.96 cv
453.96 365.84 li
451.32 368.48 448.68 368.48 446.04 365.84 cv
434.16 353.96 li
cp
f
431.28 454.68 mo
428.16 451.56 428.16 448.44 431.28 445.32 cv
445.32 431.28 li
448.44 428.16 451.56 428.16 454.68 431.28 cv
468.72 445.32 li
471.84 448.44 471.84 451.56 468.72 454.68 cv
454.68 468.72 li
451.56 471.84 448.44 471.84 445.32 468.72 cv
431.28 454.68 li
cp
f
428.4 555.4 mo
424.8 551.8 424.8 548.2 428.4 544.6 cv
444.6 528.4 li
448.2 524.8 451.8 524.8 455.4 528.4 cv
471.6 544.6 li
475.2 548.2 475.2 551.8 471.6 555.4 cv
455.4 571.6 li
451.8 575.2 448.2 575.2 444.6 571.6 cv
428.4 555.4 li
cp
f
425.52 656.12 mo
421.44 652.04 421.44 647.96 425.52 643.88 cv
443.88 625.52 li
447.96 621.44 452.04 621.44 456.12 625.52 cv
474.48 643.88 li
478.56 647.96 478.56 652.04 474.48 656.12 cv
456.12 674.48 li
452.04 678.56 447.96 678.56 443.88 674.48 cv
425.52 656.12 li
cp
f
422.64 756.84 mo
418.08 752.28 418.08 747.72 422.64 743.16 cv
443.16 722.64 li
447.72 718.08 452.28 718.08 456.84 722.64 cv
477.36 743.16 li
481.92 747.72 481.92 752.28 477.36 756.84 cv
456.84 777.36 li
452.28 781.92 447.72 781.92 443.16 777.36 cv
422.64 756.84 li
cp
f
419.76 857.56 mo
414.72 852.52 414.72 847.48 419.76 842.44 cv
442.44 819.76 li
447.48 814.72 452.52 814.72 457.56 819.76 cv
480.24 842.44 li
485.28 847.48 485.28 852.52 480.24 857.56 cv
457.56 880.24 li
452.52 885.28 447.48 885.28 442.44 880.24 cv
419.76 857.56 li
cp
f
416.88 958.28 mo
411.36 952.76 411.36 947.24 416.88 941.72 cv
441.72 916.88 li
447.24 911.36 452.76 911.36 458.28 916.88 cv
483.12 941.72 li
488.64 947.24 488.64 952.76 483.12 958.28 cv
458.28 983.12 li
452.76 988.64 447.24 988.64 441.72 983.12 cv
416.88 958.28 li
cp
f
542.8 51.7998 mo
541.6 50.6001 541.6 49.3999 542.8 48.2002 cv
548.2 42.7998 li
549.4 41.6001 550.6 41.6001 551.8 42.7998 cv
557.2 48.2002 li
558.4 49.3999 558.4 50.6001 557.2 51.7998 cv
551.8 57.2002 li
550.6 58.3999 549.4 58.3999 548.2 57.2002 cv
542.8 51.7998 li
cp
f
539.92 152.52 mo
538.24 150.84 538.24 149.16 539.92 147.48 cv
547.48 139.92 li
549.16 138.24 550.84 138.24 552.52 139.92 cv
560.08 147.48 li
561.76 149.16 561.76 150.84 560.08 152.52 cv
552.52 160.08 li
550.84 161.76 549.16 161.76 547.48 160.08 cv
539.92 152.52 li
cp
f
537.04 253.24 mo
534.88 251.08 534.88 248.92 537.04 246.76 cv
546.76 237.04 li
548.92 234.88 551.08 234.88 553.24 237.04 cv
562.96 246.76 li
565.12 248.92 565.12 251.08 562.96 253.24 cv
553.24 262.96 li
551.08 265.12 548.92 265.12 546.76 262.96 cv
537.04 253.24 li
cp
f
534.16 353.96 mo
531.52 351.32 531.52 348.68 534.16 346.04 cv
546.04 334.16 li
548.68 331.52 551.32 331.52 553.96 334.16 cv
565.84 346.04 li
568.48 348.68 568.48 351.32 565.84 353.96 cv
553.96 365.84 li
551.32 368.48 548.68 368.48 546.04 365.84 cv
534.16 353.96 li
cp
f
531.28 454.68 mo
528.16 451.56 528.16 448.44 531.28 445.32 cv
545.32 431.28 li
548.44 428.16 551.56 428.16 554.68 431.28 cv
568.72 445.32 li
571.84 448.44 571.84 451.56 568.72 454.68 cv
554.68 468.72 li
551.56 471.84 548.44 471.84 545.32 468.72 cv
531.28 454.68 li
cp
f
528.4 555.4 mo
524.8 551.8 524.8 548.2 528.4 544.6 cv
544.6 528.4 li
548.2 524.8 551.8 524.8 555.4 528.4 cv
571.6 544.6 li
575.2 548.2 575.2 551.8 571.6 555.4 cv
555.4 571.6 li
551.8 575.2 548.2 575.2 544.6 571.6 cv
528.4 555.4 li
cp
f
525.52 656.12 mo
521.44 652.04 521.44 647.96 525.52 643.88 cv
543.88 625.52 li
547.96 621.44 552.04 621.44 556.12 625.52 cv
574.48 643.88 li
578.56 647.96 578.56 652.04 574.48 656.12 cv
556.12 674.48 li
552.04 678.56 547.96 678.56 543.88 674.48 cv
525.52 656.12 li
cp
f
522.64 756.84 mo
518.08 752.28 518.08 747.72 522.64 743.16 cv
543.16 722.64 li
547.72 718.08 552.28 718.08 556.84 722.64 cv
577.36 743.16 li
581.92 747.72 581.92 752.28 577.36 756.84 cv
556.84 777.36 li
552.28 781.92 547.72 781.92 543.16 777.36 cv
522.64 756.84 li
cp
f
519.76 857.56 mo
514.72 852.52 514.72 847.48 519.76 842.44 cv
542.44 819.76 li
547.48 814.72 552.52 814.72 557.56 819.76 cv
580.24 842.44 li
585.28 847.48 585.28 852.52 580.24 857.56 cv
557.56 880.24 li
552.52 885.28 547.48 885.28 542.44 880.24 cv
519.76 857.56 li
cp
f
516.88 958.28 mo
511.36 952.76 511.36 947.24 516.88 941.72 cv
541.72 916.88 li
547.24 911.36 552.76 911.36 558.28 916.88 cv
583.12 941.72 li
588.64 947.24 588.64 952.76 583.12 958.28 cv
558.28 983.12 li
552.76 988.64 547.24 988.64 541.72 983.12 cv
516.88 958.28 li
cp
f
644.024 51.4941 mo
643.028 50.498 643.028 49.502 644.024 48.5059 cv
648.506 44.0239 li
649.502 43.0278 650.498 43.0278 651.494 44.0239 cv
655.976 48.5059 li
656.972 49.502 656.972 50.498 655.976 51.4941 cv
651.494 55.9761 li
650.498 56.9722 649.502 56.9722 648.506 55.9761 cv
644.024 51.4941 li
cp
f
641.634 152.092 mo
640.239 150.697 640.239 149.303 641.634 147.908 cv
647.908 141.634 li
649.303 140.239 650.697 140.239 652.092 141.634 cv
658.366 147.908 li
659.761 149.303 659.761 150.697 658.366 152.092 cv
652.092 158.366 li
650.697 159.761 649.303 159.761 647.908 158.366 cv
641.634 152.092 li
cp
f
639.243 252.689 mo
637.45 250.896 637.45 249.104 639.243 247.311 cv
647.311 239.243 li
649.104 237.45 650.896 237.45 652.689 239.243 cv
660.757 247.311 li
662.55 249.104 662.55 250.896 660.757 252.689 cv
652.689 260.757 li
650.896 262.55 649.104 262.55 647.311 260.757 cv
639.243 252.689 li
cp
f
636.853 353.287 mo
634.662 351.096 634.662 348.904 636.853 346.713 cv
646.713 336.853 li
648.904 334.662 651.096 334.662 653.287 336.853 cv
663.147 346.713 li
665.338 348.904 665.338 351.096 663.147 353.287 cv
653.287 363.147 li
651.096 365.338 648.904 365.338 646.713 363.147 cv
636.853 353.287 li
cp
f
634.463 453.885 mo
631.873 451.295 631.873 448.705 634.463 446.115 cv
646.115 434.463 li
648.705 431.873 651.295 431.873 653.885 434.463 cv
665.537 446.115 li
668.127 448.705 668.127 451.295 665.537 453.885 cv
653.885 465.537 li
651.295 468.127 648.705 468.127 646.115 465.537 cv
634.463 453.885 li
cp
f
632.072 554.482 mo
629.084 551.494 629.084 548.506 632.072 545.518 cv
645.518 532.072 li
648.506 529.084 651.494 529.084 654.482 532.072 cv
667.928 545.518 li
670.916 548.506 670.916 551.494 667.928 554.482 cv
654.482 567.928 li
651.494 570.916 648.506 570.916 645.518 567.928 cv
632.072 554.482 li
cp
f
629.682 655.08 mo
626.295 651.693 626.295 648.307 629.682 644.92 cv
644.92 629.682 li
648.307 626.295 651.693 626.295 655.08 629.682 cv
670.318 644.92 li
673.705 648.307 673.705 651.693 670.318 655.08 cv
655.08 670.318 li
651.693 673.705 648.307 673.705 644.92 670.318 cv
629.682 655.08 li
cp
f
627.291 755.677 mo
623.507 751.893 623.507 748.107 627.291 744.323 cv
644.323 727.291 li
648.107 723.507 651.893 723.507 655.677 727.291 cv
672.709 744.323 li
676.493 748.107 676.493 751.893 672.709 755.677 cv
655.677 772.709 li
651.893 776.493 648.107 776.493 644.323 772.709 cv
627.291 755.677 li
cp
f
624.9 856.274 mo
620.718 852.092 620.718 847.908 624.9 843.726 cv
643.726 824.9 li
647.908 820.718 652.092 820.718 656.274 824.9 cv
675.1 843.726 li
679.282 847.908 679.282 852.092 675.1 856.274 cv
656.274 875.1 li
652.092 879.282 647.908 879.282 643.726 875.1 cv
624.9 856.274 li
cp
f
622.511 956.872 mo
617.929 952.291 617.929 947.709 622.511 943.128 cv
643.128 922.511 li
647.709 917.929 652.291 917.929 656.872 922.511 cv
677.489 943.128 li
682.071 947.709 682.071 952.291 677.489 956.872 cv
656.872 977.489 li
652.291 982.071 647.709 982.071 643.128 977.489 cv
622.511 956.872 li
cp
f
745.248 51.188 mo
744.456 50.396 744.456 49.604 745.248 48.812 cv
748.813 45.248 li
749.604 44.4561 750.396 44.4561 751.188 45.248 cv
754.752 48.812 li
755.544 49.604 755.544 50.396 754.752 51.188 cv
751.188 54.752 li
750.396 55.5439 749.604 55.5439 748.813 54.752 cv
745.248 51.188 li
cp
f
743.348 151.663 mo
742.238 150.554 742.238 149.446 743.348 148.337 cv
748.337 143.347 li
749.445 142.238 750.555 142.238 751.663 143.347 cv
756.652 148.337 li
757.762 149.446 757.762 150.554 756.652 151.663 cv
751.663 156.653 li
750.555 157.762 749.445 157.762 748.337 156.653 cv
743.348 151.663 li
cp
f
741.446 252.139 mo
740.021 250.713 740.021 249.287 741.446 247.861 cv
747.861 241.446 li
749.287 240.021 750.713 240.021 752.139 241.446 cv
758.554 247.861 li
759.979 249.287 759.979 250.713 758.554 252.139 cv
752.139 258.554 li
750.713 259.979 749.287 259.979 747.861 258.554 cv
741.446 252.139 li
cp
f
739.546 352.614 mo
737.803 350.871 737.803 349.129 739.546 347.386 cv
747.387 339.545 li
749.129 337.803 750.871 337.803 752.613 339.545 cv
760.454 347.386 li
762.197 349.129 762.197 350.871 760.454 352.614 cv
752.613 360.455 li
750.871 362.197 749.129 362.197 747.387 360.455 cv
739.546 352.614 li
cp
f
737.645 453.089 mo
735.586 451.029 735.586 448.971 737.645 446.911 cv
746.911 437.645 li
748.971 435.586 751.029 435.586 753.089 437.645 cv
762.355 446.911 li
764.414 448.971 764.414 451.029 762.355 453.089 cv
753.089 462.355 li
751.029 464.414 748.971 464.414 746.911 462.355 cv
737.645 453.089 li
cp
f
735.744 553.564 mo
733.368 551.188 733.368 548.812 735.744 546.436 cv
746.436 535.744 li
748.813 533.368 751.188 533.368 753.564 535.744 cv
764.256 546.436 li
766.632 548.812 766.632 551.188 764.256 553.564 cv
753.564 564.256 li
751.188 566.632 748.813 566.632 746.436 564.256 cv
735.744 553.564 li
cp
f
733.843 654.039 mo
731.15 651.347 731.15 648.653 733.843 645.961 cv
745.961 633.843 li
748.653 631.15 751.347 631.15 754.039 633.843 cv
766.157 645.961 li
768.85 648.653 768.85 651.347 766.157 654.039 cv
754.039 666.157 li
751.347 668.85 748.653 668.85 745.961 666.157 cv
733.843 654.039 li
cp
f
731.942 754.515 mo
728.933 751.505 728.933 748.495 731.942 745.485 cv
745.485 731.942 li
748.495 728.933 751.505 728.933 754.515 731.942 cv
768.058 745.485 li
771.067 748.495 771.067 751.505 768.058 754.515 cv
754.515 768.058 li
751.505 771.067 748.495 771.067 745.485 768.058 cv
731.942 754.515 li
cp
f
730.042 854.989 mo
726.715 851.663 726.715 848.337 730.042 845.011 cv
745.011 830.042 li
748.337 826.715 751.663 826.715 754.989 830.042 cv
769.958 845.011 li
773.285 848.337 773.285 851.663 769.958 854.989 cv
754.989 869.958 li
751.663 873.285 748.337 873.285 745.011 869.958 cv
730.042 854.989 li
cp
f
728.141 955.465 mo
724.498 951.821 724.498 948.179 728.141 944.535 cv
744.535 928.141 li
748.179 924.498 751.821 924.498 755.465 928.141 cv
771.859 944.535 li
775.502 948.179 775.502 951.821 771.859 955.465 cv
755.465 971.859 li
751.821 975.502 748.179 975.502 744.535 971.859 cv
728.141 955.465 li
cp
f
846.472 50.8818 mo
845.884 50.2939 845.884 49.7061 846.472 49.1182 cv
849.118 46.4722 li
849.706 45.8838 850.294 45.8838 850.882 46.4722 cv
853.528 49.1182 li
854.116 49.7061 854.116 50.2939 853.528 50.8818 cv
850.882 53.5278 li
850.294 54.1162 849.706 54.1162 849.118 53.5278 cv
846.472 50.8818 li
cp
f
845.061 151.235 mo
844.237 150.412 844.237 149.588 845.061 148.765 cv
848.766 145.061 li
849.588 144.238 850.412 144.238 851.234 145.061 cv
854.939 148.765 li
855.763 149.588 855.763 150.412 854.939 151.235 cv
851.234 154.939 li
850.412 155.762 849.588 155.762 848.766 154.939 cv
845.061 151.235 li
cp
f
843.649 251.587 mo
842.591 250.529 842.591 249.471 843.649 248.413 cv
848.412 243.649 li
849.471 242.591 850.529 242.591 851.588 243.649 cv
856.351 248.413 li
857.409 249.471 857.409 250.529 856.351 251.587 cv
851.588 256.351 li
850.529 257.409 849.471 257.409 848.412 256.351 cv
843.649 251.587 li
cp
f
842.238 351.94 mo
840.945 350.647 840.945 349.353 842.238 348.06 cv
848.06 342.238 li
849.354 340.945 850.646 340.945 851.94 342.238 cv
857.762 348.06 li
859.055 349.353 859.055 350.647 857.762 351.94 cv
851.94 357.762 li
850.646 359.055 849.354 359.055 848.06 357.762 cv
842.238 351.94 li
cp
f
840.827 452.293 mo
839.299 450.765 839.299 449.235 840.827 447.707 cv
847.707 440.827 li
849.235 439.299 850.765 439.299 852.293 440.827 cv
859.173 447.707 li
860.701 449.235 860.701 450.765 859.173 452.293 cv
852.293 459.173 li
850.765 460.701 849.235 460.701 847.707 459.173 cv
840.827 452.293 li
cp
f
839.416 552.646 mo
837.652 550.882 837.652 549.118 839.416 547.354 cv
847.354 539.416 li
849.118 537.652 850.882 537.652 852.646 539.416 cv
860.584 547.354 li
862.348 549.118 862.348 550.882 860.584 552.646 cv
852.646 560.584 li
850.882 562.348 849.118 562.348 847.354 560.584 cv
839.416 552.646 li
cp
f
838.005 652.999 mo
836.006 651 836.006 649 838.005 647.001 cv
847.001 638.005 li
849 636.006 851 636.006 852.999 638.005 cv
861.995 647.001 li
863.994 649 863.994 651 861.995 652.999 cv
852.999 661.995 li
851 663.994 849 663.994 847.001 661.995 cv
838.005 652.999 li
cp
f
836.594 753.352 mo
834.359 751.117 834.359 748.883 836.594 746.648 cv
846.648 736.594 li
848.883 734.359 851.117 734.359 853.352 736.594 cv
863.406 746.648 li
865.641 748.883 865.641 751.117 863.406 753.352 cv
853.352 763.406 li
851.117 765.641 848.883 765.641 846.648 763.406 cv
836.594 753.352 li
cp
f
835.183 853.704 mo
832.713 851.234 832.713 848.766 835.183 846.296 cv
846.296 835.183 li
848.766 832.713 851.234 832.713 853.704 835.183 cv
864.817 846.296 li
867.287 848.766 867.287 851.234 864.817 853.704 cv
853.704 864.817 li
851.234 867.287 848.766 867.287 846.296 864.817 cv
835.183 853.704 li
cp
f
833.771 954.058 mo
831.066 951.353 831.066 948.647 833.771 945.942 cv
845.942 933.771 li
848.647 931.066 851.353 931.066 854.058 933.771 cv
866.229 945.942 li
868.934 948.647 868.934 951.353 866.229 954.058 cv
854.058 966.229 li
851.353 968.934 848.647 968.934 845.942 966.229 cv
833.771 954.058 li
cp
f
947.696 50.5762 mo
947.313 50.1919 947.313 49.8081 947.696 49.4238 cv
949.424 47.6958 li
949.808 47.312 950.192 47.312 950.576 47.6958 cv
952.304 49.4238 li
952.688 49.8081 952.688 50.1919 952.304 50.5762 cv
950.576 52.3042 li
950.192 52.688 949.808 52.688 949.424 52.3042 cv
947.696 50.5762 li
cp
f
946.774 150.807 mo
946.236 150.269 946.236 149.731 946.774 149.193 cv
949.193 146.774 li
949.731 146.237 950.269 146.237 950.807 146.774 cv
953.226 149.193 li
953.764 149.731 953.764 150.269 953.226 150.807 cv
950.807 153.226 li
950.269 153.763 949.731 153.763 949.193 153.226 cv
946.774 150.807 li
cp
f
945.853 251.037 mo
945.162 250.346 945.162 249.654 945.853 248.963 cv
948.963 245.853 li
949.654 245.162 950.346 245.162 951.037 245.853 cv
954.147 248.963 li
954.838 249.654 954.838 250.346 954.147 251.037 cv
951.037 254.147 li
950.346 254.838 949.654 254.838 948.963 254.147 cv
945.853 251.037 li
cp
f
944.932 351.267 mo
944.086 350.422 944.086 349.578 944.932 348.733 cv
948.732 344.931 li
949.577 344.086 950.423 344.086 951.268 344.931 cv
955.068 348.733 li
955.914 349.578 955.914 350.422 955.068 351.267 cv
951.268 355.069 li
950.423 355.914 949.577 355.914 948.732 355.069 cv
944.932 351.267 li
cp
f
944.01 451.498 mo
943.012 450.499 943.012 449.501 944.01 448.502 cv
948.502 444.01 li
949.501 443.011 950.499 443.011 951.498 444.01 cv
955.99 448.502 li
956.988 449.501 956.988 450.499 955.99 451.498 cv
951.498 455.99 li
950.499 456.989 949.501 456.989 948.502 455.99 cv
944.01 451.498 li
cp
f
943.088 551.728 mo
941.936 550.576 941.936 549.424 943.088 548.272 cv
948.271 543.088 li
949.424 541.936 950.576 541.936 951.729 543.088 cv
956.912 548.272 li
958.064 549.424 958.064 550.576 956.912 551.728 cv
951.729 556.912 li
950.576 558.064 949.424 558.064 948.271 556.912 cv
943.088 551.728 li
cp
f
942.166 651.958 mo
940.86 650.652 940.86 649.348 942.166 648.042 cv
948.042 642.166 li
949.348 640.86 950.652 640.86 951.958 642.166 cv
957.834 648.042 li
959.14 649.348 959.14 650.652 957.834 651.958 cv
951.958 657.834 li
950.652 659.14 949.348 659.14 948.042 657.834 cv
942.166 651.958 li
cp
f
941.245 752.188 mo
939.785 750.729 939.785 749.271 941.245 747.812 cv
947.812 741.245 li
949.271 739.785 950.729 739.785 952.188 741.245 cv
958.755 747.812 li
960.215 749.271 960.215 750.729 958.755 752.188 cv
952.188 758.755 li
950.729 760.215 949.271 760.215 947.812 758.755 cv
941.245 752.188 li
cp
f
940.323 852.419 mo
938.71 850.807 938.71 849.193 940.323 847.581 cv
947.581 840.323 li
949.193 838.71 950.807 838.71 952.419 840.323 cv
959.677 847.581 li
961.29 849.193 961.29 850.807 959.677 852.419 cv
952.419 859.677 li
950.807 861.29 949.193 861.29 947.581 859.677 cv
940.323 852.419 li
cp
f
939.401 952.649 mo
937.635 950.883 937.635 949.117 939.401 947.351 cv
947.351 939.401 li
949.117 937.635 950.883 937.635 952.649 939.401 cv
960.599 947.351 li
962.365 949.117 962.365 950.883 960.599 952.649 cv
952.649 960.599 li
950.883 962.365 949.117 962.365 947.351 960.599 cv
939.401 952.649 li
cp
f
-1.50391 .375977 mo
-1.75488 .125488 -1.75488 -.125488 -1.50391 -.375977 cv
-.375977 -1.50391 li
-.125488 -1.75488 .125488 -1.75488 .375977 -1.50391 cv
1.50391 -.375977 li
1.75488 -.125488 1.75488 .125488 1.50391 .375977 cv
.375977 1.50391 li
.125488 1.75488 -.125488 1.75488 -.375977 1.50391 cv
-1.50391 .375977 li
cp
f
-2.25586 100.564 mo
-2.63184 100.188 -2.63184 99.812 -2.25586 99.436 cv
-.563965 97.7441 li
-.187988 97.3682 .187988 97.3682 .563965 97.7441 cv
2.25586 99.436 li
2.63184 99.812 2.63184 100.188 2.25586 100.564 cv
.563965 102.256 li
.187988 102.632 -.187988 102.632 -.563965 102.256 cv
-2.25586 100.564 li
cp
f
-3.00781 200.752 mo
-3.50928 200.25 -3.50928 199.75 -3.00781 199.248 cv
-.751953 196.992 li
-.250488 196.491 .250488 196.491 .751953 196.992 cv
3.00781 199.248 li
3.50928 199.75 3.50928 200.25 3.00781 200.752 cv
.751953 203.008 li
.250488 203.509 -.250488 203.509 -.751953 203.008 cv
-3.00781 200.752 li
cp
f
-3.75977 300.94 mo
-4.38672 300.313 -4.38672 299.687 -3.75977 299.06 cv
-.939941 296.24 li
-.313477 295.613 .313477 295.613 .939941 296.24 cv
3.75977 299.06 li
4.38672 299.687 4.38672 300.313 3.75977 300.94 cv
.939941 303.76 li
.313477 304.387 -.313477 304.387 -.939941 303.76 cv
-3.75977 300.94 li
cp
f
-4.51221 401.128 mo
-5.26416 400.376 -5.26416 399.624 -4.51221 398.872 cv
-1.12793 395.488 li
-.375977 394.736 .375977 394.736 1.12793 395.488 cv
4.51221 398.872 li
5.26416 399.624 5.26416 400.376 4.51221 401.128 cv
1.12793 404.512 li
.375977 405.264 -.375977 405.264 -1.12793 404.512 cv
-4.51221 401.128 li
cp
f
-5.26416 501.316 mo
-6.14111 500.438 -6.14111 499.562 -5.26416 498.684 cv
-1.31592 494.736 li
-.438477 493.858 .438477 493.858 1.31592 494.736 cv
5.26416 498.684 li
6.14111 499.562 6.14111 500.438 5.26416 501.316 cv
1.31592 505.264 li
.438477 506.142 -.438477 506.142 -1.31592 505.264 cv
-5.26416 501.316 li
cp
f
-6.01611 601.504 mo
-7.01855 600.501 -7.01855 599.499 -6.01611 598.496 cv
-1.50391 593.984 li
-.501465 592.981 .501465 592.981 1.50391 593.984 cv
6.01611 598.496 li
7.01855 599.499 7.01855 600.501 6.01611 601.504 cv
1.50391 606.016 li
.501465 607.019 -.501465 607.019 -1.50391 606.016 cv
-6.01611 601.504 li
cp
f
-6.76807 701.692 mo
-7.896 700.564 -7.896 699.436 -6.76807 698.308 cv
-1.69189 693.232 li
-.563965 692.104 .563965 692.104 1.69189 693.232 cv
6.76807 698.308 li
7.896 699.436 7.896 700.564 6.76807 701.692 cv
1.69189 706.768 li
.563965 707.896 -.563965 707.896 -1.69189 706.768 cv
-6.76807 701.692 li
cp
f
-7.52002 801.88 mo
-8.77344 800.627 -8.77344 799.373 -7.52002 798.12 cv
-1.87988 792.48 li
-.626465 791.227 .626465 791.227 1.87988 792.48 cv
7.52002 798.12 li
8.77344 799.373 8.77344 800.627 7.52002 801.88 cv
1.87988 807.52 li
.626465 808.773 -.626465 808.773 -1.87988 807.52 cv
-7.52002 801.88 li
cp
f
-8.27197 902.068 mo
-9.65088 900.689 -9.65088 899.311 -8.27197 897.932 cv
-2.06787 891.728 li
-.689453 890.35 .689453 890.35 2.06787 891.728 cv
8.27197 897.932 li
9.65088 899.311 9.65088 900.689 8.27197 902.068 cv
2.06787 908.272 li
.689453 909.65 -.689453 909.65 -2.06787 908.272 cv
-8.27197 902.068 li
cp
f
-9.02393 1002.26 mo
-10.5278 1000.75 -10.5278 999.248 -9.02393 997.744 cv
-2.25586 990.976 li
-.751953 989.472 .751953 989.472 2.25586 990.976 cv
9.02393 997.744 li
10.5278 999.248 10.5278 1000.75 9.02393 1002.26 cv
2.25586 1009.02 li
.751953 1010.53 -.751953 1010.53 -2.25586 1009.02 cv
-9.02393 1002.26 li
cp
f
97.4082 .647949 mo
96.9761 .21582 96.9761 -.21582 97.4082 -.647949 cv
99.3521 -2.5918 li
99.7842 -3.02393 100.216 -3.02393 100.648 -2.5918 cv
102.592 -.647949 li
103.024 -.21582 103.024 .21582 102.592 .647949 cv
100.648 2.5918 li
100.216 3.02393 99.7842 3.02393 99.3521 2.5918 cv
97.4082 .647949 li
cp
f
96.1118 100.972 mo
95.4639 100.324 95.4639 99.6758 96.1118 99.0278 cv
99.0278 96.1118 li
99.6758 95.4639 100.324 95.4639 100.972 96.1118 cv
103.888 99.0278 li
104.536 99.6758 104.536 100.324 103.888 100.972 cv
100.972 103.888 li
100.324 104.536 99.6758 104.536 99.0278 103.888 cv
96.1118 100.972 li
cp
f
94.8159 201.296 mo
93.9521 200.432 93.9521 199.568 94.8159 198.704 cv
98.7041 194.816 li
99.5679 193.952 100.432 193.952 101.296 194.816 cv
105.184 198.704 li
106.048 199.568 106.048 200.432 105.184 201.296 cv
101.296 205.184 li
100.432 206.048 99.5679 206.048 98.7041 205.184 cv
94.8159 201.296 li
cp
f
93.52 301.62 mo
92.4399 300.54 92.4399 299.46 93.52 298.38 cv
98.3799 293.52 li
99.46 292.44 100.54 292.44 101.62 293.52 cv
106.48 298.38 li
107.56 299.46 107.56 300.54 106.48 301.62 cv
101.62 306.48 li
100.54 307.56 99.46 307.56 98.3799 306.48 cv
93.52 301.62 li
cp
f
92.2241 401.944 mo
90.9282 400.648 90.9282 399.352 92.2241 398.056 cv
98.0562 392.224 li
99.3521 390.928 100.648 390.928 101.944 392.224 cv
107.776 398.056 li
109.072 399.352 109.072 400.648 107.776 401.944 cv
101.944 407.776 li
100.648 409.072 99.3521 409.072 98.0562 407.776 cv
92.2241 401.944 li
cp
f
90.9282 502.268 mo
89.416 500.756 89.416 499.244 90.9282 497.732 cv
97.7319 490.928 li
99.2441 489.416 100.756 489.416 102.268 490.928 cv
109.072 497.732 li
110.584 499.244 110.584 500.756 109.072 502.268 cv
102.268 509.072 li
100.756 510.584 99.2441 510.584 97.7319 509.072 cv
90.9282 502.268 li
cp
f
89.6318 602.592 mo
87.9038 600.864 87.9038 599.136 89.6318 597.408 cv
97.4082 589.632 li
99.1362 587.904 100.864 587.904 102.592 589.632 cv
110.368 597.408 li
112.096 599.136 112.096 600.864 110.368 602.592 cv
102.592 610.368 li
100.864 612.096 99.1362 612.096 97.4082 610.368 cv
89.6318 602.592 li
cp
f
88.3359 702.916 mo
86.3921 700.972 86.3921 699.028 88.3359 697.084 cv
97.084 688.336 li
99.0278 686.392 100.972 686.392 102.916 688.336 cv
111.664 697.084 li
113.608 699.028 113.608 700.972 111.664 702.916 cv
102.916 711.664 li
100.972 713.608 99.0278 713.608 97.084 711.664 cv
88.3359 702.916 li
cp
f
87.04 803.24 mo
84.8799 801.08 84.8799 798.92 87.04 796.76 cv
96.7598 787.04 li
98.9199 784.88 101.08 784.88 103.24 787.04 cv
112.96 796.76 li
115.12 798.92 115.12 801.08 112.96 803.24 cv
103.24 812.96 li
101.08 815.12 98.9199 815.12 96.7598 812.96 cv
87.04 803.24 li
cp
f
85.7441 903.564 mo
83.3682 901.188 83.3682 898.812 85.7441 896.436 cv
96.436 885.744 li
98.812 883.368 101.188 883.368 103.564 885.744 cv
114.256 896.436 li
116.632 898.812 116.632 901.188 114.256 903.564 cv
103.564 914.256 li
101.188 916.632 98.812 916.632 96.436 914.256 cv
85.7441 903.564 li
cp
f
84.4482 1003.89 mo
81.856 1001.3 81.856 998.704 84.4482 996.112 cv
96.1118 984.448 li
98.7041 981.856 101.296 981.856 103.888 984.448 cv
115.552 996.112 li
118.144 998.704 118.144 1001.3 115.552 1003.89 cv
103.888 1015.55 li
101.296 1018.14 98.7041 1018.14 96.1118 1015.55 cv
84.4482 1003.89 li
cp
f
196.32 .919922 mo
195.707 .306641 195.707 -.306641 196.32 -.919922 cv
199.08 -3.68018 li
199.693 -4.29346 200.307 -4.29346 200.92 -3.68018 cv
203.68 -.919922 li
204.293 -.306641 204.293 .306641 203.68 .919922 cv
200.92 3.68018 li
200.307 4.29346 199.693 4.29346 199.08 3.68018 cv
196.32 .919922 li
cp
f
194.48 101.38 mo
193.56 100.46 193.56 99.54 194.48 98.6201 cv
198.62 94.48 li
199.54 93.5601 200.46 93.5601 201.38 94.48 cv
205.52 98.6201 li
206.44 99.54 206.44 100.46 205.52 101.38 cv
201.38 105.52 li
200.46 106.44 199.54 106.44 198.62 105.52 cv
194.48 101.38 li
cp
f
192.64 201.84 mo
191.413 200.613 191.413 199.387 192.64 198.16 cv
198.16 192.64 li
199.387 191.413 200.613 191.413 201.84 192.64 cv
207.36 198.16 li
208.587 199.387 208.587 200.613 207.36 201.84 cv
201.84 207.36 li
200.613 208.587 199.387 208.587 198.16 207.36 cv
192.64 201.84 li
cp
f
190.8 302.3 mo
189.267 300.767 189.267 299.233 190.8 297.7 cv
197.7 290.8 li
199.233 289.267 200.767 289.267 202.3 290.8 cv
209.2 297.7 li
210.733 299.233 210.733 300.767 209.2 302.3 cv
202.3 309.2 li
200.767 310.733 199.233 310.733 197.7 309.2 cv
190.8 302.3 li
cp
f
188.96 402.76 mo
187.12 400.92 187.12 399.08 188.96 397.24 cv
197.24 388.96 li
199.08 387.12 200.92 387.12 202.76 388.96 cv
211.04 397.24 li
212.88 399.08 212.88 400.92 211.04 402.76 cv
202.76 411.04 li
200.92 412.88 199.08 412.88 197.24 411.04 cv
188.96 402.76 li
cp
f
187.12 503.22 mo
184.973 501.073 184.973 498.927 187.12 496.78 cv
196.78 487.12 li
198.927 484.974 201.073 484.974 203.22 487.12 cv
212.88 496.78 li
215.027 498.927 215.027 501.073 212.88 503.22 cv
203.22 512.88 li
201.073 515.026 198.927 515.026 196.78 512.88 cv
187.12 503.22 li
cp
f
185.28 603.68 mo
182.827 601.227 182.827 598.773 185.28 596.32 cv
196.32 585.28 li
198.773 582.826 201.227 582.826 203.68 585.28 cv
214.72 596.32 li
217.173 598.773 217.173 601.227 214.72 603.68 cv
203.68 614.72 li
201.227 617.174 198.773 617.174 196.32 614.72 cv
185.28 603.68 li
cp
f
183.44 704.14 mo
180.68 701.38 180.68 698.62 183.44 695.86 cv
195.86 683.44 li
198.62 680.68 201.38 680.68 204.14 683.44 cv
216.56 695.86 li
219.32 698.62 219.32 701.38 216.56 704.14 cv
204.14 716.56 li
201.38 719.32 198.62 719.32 195.86 716.56 cv
183.44 704.14 li
cp
f
181.6 804.6 mo
178.533 801.533 178.533 798.467 181.6 795.4 cv
195.4 781.6 li
198.467 778.533 201.533 778.533 204.6 781.6 cv
218.4 795.4 li
221.467 798.467 221.467 801.533 218.4 804.6 cv
204.6 818.4 li
201.533 821.467 198.467 821.467 195.4 818.4 cv
181.6 804.6 li
cp
f
179.76 905.06 mo
176.387 901.687 176.387 898.313 179.76 894.94 cv
194.94 879.76 li
198.313 876.387 201.687 876.387 205.06 879.76 cv
220.24 894.94 li
223.613 898.313 223.613 901.687 220.24 905.06 cv
205.06 920.24 li
201.687 923.613 198.313 923.613 194.94 920.24 cv
179.76 905.06 li
cp
f
177.92 1005.52 mo
174.24 1001.84 174.24 998.16 177.92 994.48 cv
194.48 977.92 li
198.16 974.24 201.84 974.24 205.52 977.92 cv
222.08 994.48 li
225.76 998.16 225.76 1001.84 222.08 1005.52 cv
205.52 1022.08 li
201.84 1025.76 198.16 1025.76 194.48 1022.08 cv
177.92 1005.52 li
cp
f
295.232 1.19189 mo
294.438 .397461 294.438 -.397461 295.232 -1.19189 cv
298.808 -4.76807 li
299.603 -5.5625 300.397 -5.5625 301.192 -4.76807 cv
304.768 -1.19189 li
305.563 -.397461 305.563 .397461 304.768 1.19189 cv
301.192 4.76807 li
300.397 5.5625 299.603 5.5625 298.808 4.76807 cv
295.232 1.19189 li
cp
f
292.848 101.788 mo
291.656 100.596 291.656 99.4038 292.848 98.2119 cv
298.212 92.8481 li
299.404 91.6563 300.596 91.6563 301.788 92.8481 cv
307.152 98.2119 li
308.344 99.4038 308.344 100.596 307.152 101.788 cv
301.788 107.152 li
300.596 108.344 299.404 108.344 298.212 107.152 cv
292.848 101.788 li
cp
f
290.464 202.384 mo
288.875 200.795 288.875 199.205 290.464 197.616 cv
297.616 190.464 li
299.205 188.875 300.795 188.875 302.384 190.464 cv
309.536 197.616 li
311.125 199.205 311.125 200.795 309.536 202.384 cv
302.384 209.536 li
300.795 211.125 299.205 211.125 297.616 209.536 cv
290.464 202.384 li
cp
f
288.08 302.98 mo
286.093 300.993 286.093 299.007 288.08 297.02 cv
297.02 288.08 li
299.007 286.093 300.993 286.093 302.98 288.08 cv
311.92 297.02 li
313.906 299.007 313.906 300.993 311.92 302.98 cv
302.98 311.92 li
300.993 313.907 299.007 313.907 297.02 311.92 cv
288.08 302.98 li
cp
f
285.696 403.576 mo
283.312 401.192 283.312 398.808 285.696 396.424 cv
296.424 385.696 li
298.808 383.312 301.192 383.312 303.576 385.696 cv
314.304 396.424 li
316.688 398.808 316.688 401.192 314.304 403.576 cv
303.576 414.304 li
301.192 416.688 298.808 416.688 296.424 414.304 cv
285.696 403.576 li
cp
f
283.312 504.172 mo
280.531 501.391 280.531 498.609 283.312 495.828 cv
295.828 483.313 li
298.609 480.53 301.391 480.53 304.172 483.313 cv
316.688 495.828 li
319.47 498.609 319.47 501.391 316.688 504.172 cv
304.172 516.688 li
301.391 519.47 298.609 519.47 295.828 516.688 cv
283.312 504.172 li
cp
f
280.928 604.768 mo
277.75 601.589 277.75 598.411 280.928 595.232 cv
295.232 580.928 li
298.411 577.749 301.589 577.749 304.768 580.928 cv
319.072 595.232 li
322.251 598.411 322.251 601.589 319.072 604.768 cv
304.768 619.072 li
301.589 622.251 298.411 622.251 295.232 619.072 cv
280.928 604.768 li
cp
f
278.544 705.364 mo
274.968 701.788 274.968 698.212 278.544 694.636 cv
294.636 678.544 li
298.212 674.968 301.788 674.968 305.364 678.544 cv
321.456 694.636 li
325.032 698.212 325.032 701.788 321.456 705.364 cv
305.364 721.456 li
301.788 725.032 298.212 725.032 294.636 721.456 cv
278.544 705.364 li
cp
f
276.16 805.96 mo
272.187 801.986 272.187 798.014 276.16 794.04 cv
294.04 776.16 li
298.013 772.187 301.987 772.187 305.96 776.16 cv
323.84 794.04 li
327.813 798.014 327.813 801.986 323.84 805.96 cv
305.96 823.84 li
301.987 827.813 298.013 827.813 294.04 823.84 cv
276.16 805.96 li
cp
f
273.776 906.556 mo
269.405 902.186 269.405 897.814 273.776 893.444 cv
293.444 873.776 li
297.814 869.405 302.186 869.405 306.556 873.776 cv
326.224 893.444 li
330.595 897.814 330.595 902.186 326.224 906.556 cv
306.556 926.224 li
302.186 930.595 297.814 930.595 293.444 926.224 cv
273.776 906.556 li
cp
f
271.392 1007.15 mo
266.624 1002.38 266.624 997.616 271.392 992.848 cv
292.848 971.392 li
297.616 966.624 302.384 966.624 307.152 971.392 cv
328.608 992.848 li
333.376 997.616 333.376 1002.38 328.608 1007.15 cv
307.152 1028.61 li
302.384 1033.38 297.616 1033.38 292.848 1028.61 cv
271.392 1007.15 li
cp
f
394.144 1.46387 mo
393.168 .487793 393.168 -.487793 394.144 -1.46387 cv
398.536 -5.85596 li
399.512 -6.83203 400.488 -6.83203 401.464 -5.85596 cv
405.856 -1.46387 li
406.832 -.487793 406.832 .487793 405.856 1.46387 cv
401.464 5.85596 li
400.488 6.83203 399.512 6.83203 398.536 5.85596 cv
394.144 1.46387 li
cp
f
391.216 102.196 mo
389.752 100.732 389.752 99.2681 391.216 97.8042 cv
397.804 91.2158 li
399.268 89.752 400.732 89.752 402.196 91.2158 cv
408.784 97.8042 li
410.248 99.2681 410.248 100.732 408.784 102.196 cv
402.196 108.784 li
400.732 110.248 399.268 110.248 397.804 108.784 cv
391.216 102.196 li
cp
f
388.288 202.928 mo
386.336 200.976 386.336 199.024 388.288 197.072 cv
397.072 188.288 li
399.024 186.336 400.976 186.336 402.928 188.288 cv
411.712 197.072 li
413.664 199.024 413.664 200.976 411.712 202.928 cv
402.928 211.712 li
400.976 213.664 399.024 213.664 397.072 211.712 cv
388.288 202.928 li
cp
f
385.36 303.66 mo
382.92 301.22 382.92 298.78 385.36 296.34 cv
396.34 285.36 li
398.78 282.92 401.22 282.92 403.66 285.36 cv
414.64 296.34 li
417.08 298.78 417.08 301.22 414.64 303.66 cv
403.66 314.64 li
401.22 317.08 398.78 317.08 396.34 314.64 cv
385.36 303.66 li
cp
f
382.432 404.392 mo
379.504 401.464 379.504 398.536 382.432 395.608 cv
395.608 382.432 li
398.536 379.504 401.464 379.504 404.392 382.432 cv
417.568 395.608 li
420.496 398.536 420.496 401.464 417.568 404.392 cv
404.392 417.568 li
401.464 420.496 398.536 420.496 395.608 417.568 cv
382.432 404.392 li
cp
f
379.504 505.124 mo
376.088 501.708 376.088 498.292 379.504 494.876 cv
394.876 479.504 li
398.292 476.088 401.708 476.088 405.124 479.504 cv
420.496 494.876 li
423.912 498.292 423.912 501.708 420.496 505.124 cv
405.124 520.496 li
401.708 523.912 398.292 523.912 394.876 520.496 cv
379.504 505.124 li
cp
f
376.576 605.856 mo
372.672 601.952 372.672 598.048 376.576 594.144 cv
394.144 576.576 li
398.048 572.672 401.952 572.672 405.856 576.576 cv
423.424 594.144 li
427.328 598.048 427.328 601.952 423.424 605.856 cv
405.856 623.424 li
401.952 627.328 398.048 627.328 394.144 623.424 cv
376.576 605.856 li
cp
f
373.648 706.588 mo
369.256 702.196 369.256 697.804 373.648 693.412 cv
393.412 673.648 li
397.804 669.256 402.196 669.256 406.588 673.648 cv
426.352 693.412 li
430.744 697.804 430.744 702.196 426.352 706.588 cv
406.588 726.352 li
402.196 730.744 397.804 730.744 393.412 726.352 cv
373.648 706.588 li
cp
f
370.72 807.32 mo
365.84 802.44 365.84 797.56 370.72 792.68 cv
392.68 770.72 li
397.56 765.84 402.44 765.84 407.32 770.72 cv
429.28 792.68 li
434.16 797.56 434.16 802.44 429.28 807.32 cv
407.32 829.28 li
402.44 834.16 397.56 834.16 392.68 829.28 cv
370.72 807.32 li
cp
f
367.792 908.052 mo
362.424 902.684 362.424 897.316 367.792 891.948 cv
391.948 867.792 li
397.316 862.424 402.684 862.424 408.052 867.792 cv
432.208 891.948 li
437.576 897.316 437.576 902.684 432.208 908.052 cv
408.052 932.208 li
402.684 937.576 397.316 937.576 391.948 932.208 cv
367.792 908.052 li
cp
f
364.864 1008.78 mo
359.008 1002.93 359.008 997.072 364.864 991.216 cv
391.216 964.864 li
397.072 959.008 402.928 959.008 408.784 964.864 cv
435.136 991.216 li
440.992 997.072 440.992 1002.93 435.136 1008.78 cv
408.784 1035.14 li
402.928 1040.99 397.072 1040.99 391.216 1035.14 cv
364.864 1008.78 li
cp
f
493.6 1.6001 mo
492.533 .533203 492.533 -.533203 493.6 -1.6001 cv
498.4 -6.3999 li
499.467 -7.4668 500.533 -7.4668 501.6 -6.3999 cv
506.4 -1.6001 li
507.467 -.533203 507.467 .533203 506.4 1.6001 cv
501.6 6.3999 li
500.533 7.4668 499.467 7.4668 498.4 6.3999 cv
493.6 1.6001 li
cp
f
490.4 102.4 mo
488.8 100.8 488.8 99.2002 490.4 97.6001 cv
497.6 90.3999 li
499.2 88.7998 500.8 88.7998 502.4 90.3999 cv
509.6 97.6001 li
511.2 99.2002 511.2 100.8 509.6 102.4 cv
502.4 109.6 li
500.8 111.2 499.2 111.2 497.6 109.6 cv
490.4 102.4 li
cp
f
487.2 203.2 mo
485.066 201.066 485.066 198.934 487.2 196.8 cv
496.8 187.2 li
498.934 185.066 501.066 185.066 503.2 187.2 cv
512.8 196.8 li
514.934 198.934 514.934 201.066 512.8 203.2 cv
503.2 212.8 li
501.066 214.934 498.934 214.934 496.8 212.8 cv
487.2 203.2 li
cp
f
484 304 mo
481.333 301.333 481.333 298.667 484 296 cv
496 284 li
498.667 281.333 501.333 281.333 504 284 cv
516 296 li
518.667 298.667 518.667 301.333 516 304 cv
504 316 li
501.333 318.667 498.667 318.667 496 316 cv
484 304 li
cp
f
480.8 404.8 mo
477.6 401.6 477.6 398.4 480.8 395.2 cv
495.2 380.8 li
498.4 377.6 501.6 377.6 504.8 380.8 cv
519.2 395.2 li
522.4 398.4 522.4 401.6 519.2 404.8 cv
504.8 419.2 li
501.6 422.4 498.4 422.4 495.2 419.2 cv
480.8 404.8 li
cp
f
477.6 505.6 mo
473.866 501.866 473.866 498.134 477.6 494.4 cv
494.4 477.6 li
498.134 473.866 501.866 473.866 505.6 477.6 cv
522.4 494.4 li
526.134 498.134 526.134 501.866 522.4 505.6 cv
505.6 522.4 li
501.866 526.134 498.134 526.134 494.4 522.4 cv
477.6 505.6 li
cp
f
474.4 606.4 mo
470.134 602.134 470.134 597.866 474.4 593.6 cv
493.6 574.4 li
497.866 570.134 502.134 570.134 506.4 574.4 cv
525.6 593.6 li
529.866 597.866 529.866 602.134 525.6 606.4 cv
506.4 625.6 li
502.134 629.866 497.866 629.866 493.6 625.6 cv
474.4 606.4 li
cp
f
471.2 707.2 mo
466.4 702.4 466.4 697.6 471.2 692.8 cv
492.8 671.2 li
497.6 666.4 502.4 666.4 507.2 671.2 cv
528.8 692.8 li
533.6 697.6 533.6 702.4 528.8 707.2 cv
507.2 728.8 li
502.4 733.6 497.6 733.6 492.8 728.8 cv
471.2 707.2 li
cp
f
468 808 mo
462.667 802.667 462.667 797.333 468 792 cv
492 768 li
497.333 762.667 502.667 762.667 508 768 cv
532 792 li
537.333 797.333 537.333 802.667 532 808 cv
508 832 li
502.667 837.333 497.333 837.333 492 832 cv
468 808 li
cp
f
464.8 908.8 mo
458.934 902.934 458.934 897.066 464.8 891.2 cv
491.2 864.8 li
497.066 858.934 502.934 858.934 508.8 864.8 cv
535.2 891.2 li
541.066 897.066 541.066 902.934 535.2 908.8 cv
508.8 935.2 li
502.934 941.066 497.066 941.066 491.2 935.2 cv
464.8 908.8 li
cp
f
461.6 1009.6 mo
455.2 1003.2 455.2 996.8 461.6 990.4 cv
490.4 961.6 li
496.8 955.2 503.2 955.2 509.6 961.6 cv
538.4 990.4 li
544.8 996.8 544.8 1003.2 538.4 1009.6 cv
509.6 1038.4 li
503.2 1044.8 496.8 1044.8 490.4 1038.4 cv
461.6 1009.6 li
cp
f
594.144 1.46387 mo
593.168 .487793 593.168 -.487793 594.144 -1.46387 cv
598.536 -5.85596 li
599.512 -6.83203 600.488 -6.83203 601.464 -5.85596 cv
605.856 -1.46387 li
606.832 -.487793 606.832 .487793 605.856 1.46387 cv
601.464 5.85596 li
600.488 6.83203 599.512 6.83203 598.536 5.85596 cv
594.144 1.46387 li
cp
f
591.216 102.196 mo
589.752 100.732 589.752 99.2681 591.216 97.8042 cv
597.804 91.2158 li
599.268 89.752 600.732 89.752 602.196 91.2158 cv
608.784 97.8042 li
610.248 99.2681 610.248 100.732 608.784 102.196 cv
602.196 108.784 li
600.732 110.248 599.268 110.248 597.804 108.784 cv
591.216 102.196 li
cp
f
588.288 202.928 mo
586.336 200.976 586.336 199.024 588.288 197.072 cv
597.072 188.288 li
599.024 186.336 600.976 186.336 602.928 188.288 cv
611.712 197.072 li
613.664 199.024 613.664 200.976 611.712 202.928 cv
602.928 211.712 li
600.976 213.664 599.024 213.664 597.072 211.712 cv
588.288 202.928 li
cp
f
585.36 303.66 mo
582.92 301.22 582.92 298.78 585.36 296.34 cv
596.34 285.36 li
598.78 282.92 601.22 282.92 603.66 285.36 cv
614.64 296.34 li
617.08 298.78 617.08 301.22 614.64 303.66 cv
603.66 314.64 li
601.22 317.08 598.78 317.08 596.34 314.64 cv
585.36 303.66 li
cp
f
582.432 404.392 mo
579.504 401.464 579.504 398.536 582.432 395.608 cv
595.608 382.432 li
598.536 379.504 601.464 379.504 604.392 382.432 cv
617.568 395.608 li
620.496 398.536 620.496 401.464 617.568 404.392 cv
604.392 417.568 li
601.464 420.496 598.536 420.496 595.608 417.568 cv
582.432 404.392 li
cp
f
579.504 505.124 mo
576.088 501.708 576.088 498.292 579.504 494.876 cv
594.876 479.504 li
598.292 476.088 601.708 476.088 605.124 479.504 cv
620.496 494.876 li
623.912 498.292 623.912 501.708 620.496 505.124 cv
605.124 520.496 li
601.708 523.912 598.292 523.912 594.876 520.496 cv
579.504 505.124 li
cp
f
576.576 605.856 mo
572.672 601.952 572.672 598.048 576.576 594.144 cv
594.144 576.576 li
598.048 572.672 601.952 572.672 605.856 576.576 cv
623.424 594.144 li
627.328 598.048 627.328 601.952 623.424 605.856 cv
605.856 623.424 li
601.952 627.328 598.048 627.328 594.144 623.424 cv
576.576 605.856 li
cp
f
573.648 706.588 mo
569.256 702.196 569.256 697.804 573.648 693.412 cv
593.412 673.648 li
597.804 669.256 602.196 669.256 606.588 673.648 cv
626.352 693.412 li
630.744 697.804 630.744 702.196 626.352 706.588 cv
606.588 726.352 li
602.196 730.744 597.804 730.744 593.412 726.352 cv
573.648 706.588 li
cp
f
570.72 807.32 mo
565.84 802.44 565.84 797.56 570.72 792.68 cv
592.68 770.72 li
597.56 765.84 602.44 765.84 607.32 770.72 cv
629.28 792.68 li
634.16 797.56 634.16 802.44 629.28 807.32 cv
607.32 829.28 li
602.44 834.16 597.56 834.16 592.68 829.28 cv
570.72 807.32 li
cp
f
567.792 908.052 mo
562.424 902.684 562.424 897.316 567.792 891.948 cv
591.948 867.792 li
597.316 862.424 602.684 862.424 608.052 867.792 cv
632.208 891.948 li
637.576 897.316 637.576 902.684 632.208 908.052 cv
608.052 932.208 li
602.684 937.576 597.316 937.576 591.948 932.208 cv
567.792 908.052 li
cp
f
564.864 1008.78 mo
559.008 1002.93 559.008 997.072 564.864 991.216 cv
591.216 964.864 li
597.072 959.008 602.928 959.008 608.784 964.864 cv
635.136 991.216 li
640.992 997.072 640.992 1002.93 635.136 1008.78 cv
608.784 1035.14 li
602.928 1040.99 597.072 1040.99 591.216 1035.14 cv
564.864 1008.78 li
cp
f
695.232 1.19189 mo
694.438 .397461 694.438 -.397461 695.232 -1.19189 cv
698.808 -4.76807 li
699.603 -5.5625 700.397 -5.5625 701.192 -4.76807 cv
704.768 -1.19189 li
705.563 -.397461 705.563 .397461 704.768 1.19189 cv
701.192 4.76807 li
700.397 5.5625 699.603 5.5625 698.808 4.76807 cv
695.232 1.19189 li
cp
f
692.848 101.788 mo
691.656 100.596 691.656 99.4038 692.848 98.2119 cv
698.212 92.8481 li
699.404 91.6563 700.596 91.6563 701.788 92.8481 cv
707.152 98.2119 li
708.344 99.4038 708.344 100.596 707.152 101.788 cv
701.788 107.152 li
700.596 108.344 699.404 108.344 698.212 107.152 cv
692.848 101.788 li
cp
f
690.464 202.384 mo
688.875 200.795 688.875 199.205 690.464 197.616 cv
697.616 190.464 li
699.205 188.875 700.795 188.875 702.384 190.464 cv
709.536 197.616 li
711.125 199.205 711.125 200.795 709.536 202.384 cv
702.384 209.536 li
700.795 211.125 699.205 211.125 697.616 209.536 cv
690.464 202.384 li
cp
f
688.08 302.98 mo
686.094 300.993 686.094 299.007 688.08 297.02 cv
697.02 288.08 li
699.007 286.093 700.993 286.093 702.98 288.08 cv
711.92 297.02 li
713.906 299.007 713.906 300.993 711.92 302.98 cv
702.98 311.92 li
700.993 313.907 699.007 313.907 697.02 311.92 cv
688.08 302.98 li
cp
f
685.696 403.576 mo
683.313 401.192 683.313 398.808 685.696 396.424 cv
696.424 385.696 li
698.808 383.312 701.192 383.312 703.576 385.696 cv
714.304 396.424 li
716.688 398.808 716.688 401.192 714.304 403.576 cv
703.576 414.304 li
701.192 416.688 698.808 416.688 696.424 414.304 cv
685.696 403.576 li
cp
f
683.313 504.172 mo
680.53 501.391 680.53 498.609 683.313 495.828 cv
695.828 483.313 li
698.609 480.53 701.391 480.53 704.172 483.313 cv
716.688 495.828 li
719.47 498.609 719.47 501.391 716.688 504.172 cv
704.172 516.688 li
701.391 519.47 698.609 519.47 695.828 516.688 cv
683.313 504.172 li
cp
f
680.928 604.768 mo
677.749 601.589 677.749 598.411 680.928 595.232 cv
695.232 580.928 li
698.41 577.749 701.59 577.749 704.768 580.928 cv
719.072 595.232 li
722.251 598.411 722.251 601.589 719.072 604.768 cv
704.768 619.072 li
701.59 622.251 698.41 622.251 695.232 619.072 cv
680.928 604.768 li
cp
f
678.544 705.364 mo
674.968 701.788 674.968 698.212 678.544 694.636 cv
694.636 678.544 li
698.212 674.968 701.788 674.968 705.364 678.544 cv
721.456 694.636 li
725.032 698.212 725.032 701.788 721.456 705.364 cv
705.364 721.456 li
701.788 725.032 698.212 725.032 694.636 721.456 cv
678.544 705.364 li
cp
f
676.16 805.96 mo
672.187 801.986 672.187 798.014 676.16 794.04 cv
694.04 776.16 li
698.014 772.187 701.986 772.187 705.96 776.16 cv
723.84 794.04 li
727.813 798.014 727.813 801.986 723.84 805.96 cv
705.96 823.84 li
701.986 827.813 698.014 827.813 694.04 823.84 cv
676.16 805.96 li
cp
f
673.776 906.556 mo
669.405 902.186 669.405 897.814 673.776 893.444 cv
693.444 873.776 li
697.814 869.405 702.186 869.405 706.556 873.776 cv
726.224 893.444 li
730.595 897.814 730.595 902.186 726.224 906.556 cv
706.556 926.224 li
702.186 930.595 697.814 930.595 693.444 926.224 cv
673.776 906.556 li
cp
f
671.392 1007.15 mo
666.624 1002.38 666.624 997.616 671.392 992.848 cv
692.848 971.392 li
697.616 966.624 702.384 966.624 707.152 971.392 cv
728.608 992.848 li
733.376 997.616 733.376 1002.38 728.608 1007.15 cv
707.152 1028.61 li
702.384 1033.38 697.616 1033.38 692.848 1028.61 cv
671.392 1007.15 li
cp
f
796.32 .919922 mo
795.707 .306641 795.707 -.306641 796.32 -.919922 cv
799.08 -3.68018 li
799.693 -4.29346 800.307 -4.29346 800.92 -3.68018 cv
803.68 -.919922 li
804.293 -.306641 804.293 .306641 803.68 .919922 cv
800.92 3.68018 li
800.307 4.29346 799.693 4.29346 799.08 3.68018 cv
796.32 .919922 li
cp
f
794.48 101.38 mo
793.56 100.46 793.56 99.54 794.48 98.6201 cv
798.62 94.48 li
799.54 93.5601 800.46 93.5601 801.38 94.48 cv
805.52 98.6201 li
806.44 99.54 806.44 100.46 805.52 101.38 cv
801.38 105.52 li
800.46 106.44 799.54 106.44 798.62 105.52 cv
794.48 101.38 li
cp
f
792.64 201.84 mo
791.413 200.613 791.413 199.387 792.64 198.16 cv
798.16 192.64 li
799.387 191.413 800.613 191.413 801.84 192.64 cv
807.36 198.16 li
808.587 199.387 808.587 200.613 807.36 201.84 cv
801.84 207.36 li
800.613 208.587 799.387 208.587 798.16 207.36 cv
792.64 201.84 li
cp
f
790.8 302.3 mo
789.267 300.767 789.267 299.233 790.8 297.7 cv
797.7 290.8 li
799.233 289.267 800.767 289.267 802.3 290.8 cv
809.2 297.7 li
810.733 299.233 810.733 300.767 809.2 302.3 cv
802.3 309.2 li
800.767 310.733 799.233 310.733 797.7 309.2 cv
790.8 302.3 li
cp
f
788.96 402.76 mo
787.12 400.92 787.12 399.08 788.96 397.24 cv
797.24 388.96 li
799.08 387.12 800.92 387.12 802.76 388.96 cv
811.04 397.24 li
812.88 399.08 812.88 400.92 811.04 402.76 cv
802.76 411.04 li
800.92 412.88 799.08 412.88 797.24 411.04 cv
788.96 402.76 li
cp
f
787.12 503.22 mo
784.974 501.073 784.974 498.927 787.12 496.78 cv
796.78 487.12 li
798.927 484.974 801.073 484.974 803.22 487.12 cv
812.88 496.78 li
815.026 498.927 815.026 501.073 812.88 503.22 cv
803.22 512.88 li
801.073 515.026 798.927 515.026 796.78 512.88 cv
787.12 503.22 li
cp
f
785.28 603.68 mo
782.826 601.227 782.826 598.773 785.28 596.32 cv
796.32 585.28 li
798.773 582.826 801.227 582.826 803.68 585.28 cv
814.72 596.32 li
817.174 598.773 817.174 601.227 814.72 603.68 cv
803.68 614.72 li
801.227 617.174 798.773 617.174 796.32 614.72 cv
785.28 603.68 li
cp
f
783.44 704.14 mo
780.68 701.38 780.68 698.62 783.44 695.86 cv
795.86 683.44 li
798.62 680.68 801.38 680.68 804.14 683.44 cv
816.56 695.86 li
819.32 698.62 819.32 701.38 816.56 704.14 cv
804.14 716.56 li
801.38 719.32 798.62 719.32 795.86 716.56 cv
783.44 704.14 li
cp
f
781.6 804.6 mo
778.533 801.533 778.533 798.467 781.6 795.4 cv
795.4 781.6 li
798.467 778.533 801.533 778.533 804.6 781.6 cv
818.4 795.4 li
821.467 798.467 821.467 801.533 818.4 804.6 cv
804.6 818.4 li
801.533 821.467 798.467 821.467 795.4 818.4 cv
781.6 804.6 li
cp
f
779.76 905.06 mo
776.387 901.687 776.387 898.313 779.76 894.94 cv
794.94 879.76 li
798.313 876.387 801.687 876.387 805.06 879.76 cv
820.24 894.94 li
823.613 898.313 823.613 901.687 820.24 905.06 cv
805.06 920.24 li
801.687 923.613 798.313 923.613 794.94 920.24 cv
779.76 905.06 li
cp
f
777.92 1005.52 mo
774.24 1001.84 774.24 998.16 777.92 994.48 cv
794.48 977.92 li
798.16 974.24 801.84 974.24 805.52 977.92 cv
822.08 994.48 li
825.76 998.16 825.76 1001.84 822.08 1005.52 cv
805.52 1022.08 li
801.84 1025.76 798.16 1025.76 794.48 1022.08 cv
777.92 1005.52 li
cp
f
897.408 .647949 mo
896.976 .21582 896.976 -.21582 897.408 -.647949 cv
899.352 -2.5918 li
899.784 -3.02393 900.216 -3.02393 900.648 -2.5918 cv
902.592 -.647949 li
903.024 -.21582 903.024 .21582 902.592 .647949 cv
900.648 2.5918 li
900.216 3.02393 899.784 3.02393 899.352 2.5918 cv
897.408 .647949 li
cp
f
896.112 100.972 mo
895.464 100.324 895.464 99.6758 896.112 99.0278 cv
899.028 96.1118 li
899.676 95.4639 900.324 95.4639 900.972 96.1118 cv
903.888 99.0278 li
904.536 99.6758 904.536 100.324 903.888 100.972 cv
900.972 103.888 li
900.324 104.536 899.676 104.536 899.028 103.888 cv
896.112 100.972 li
cp
f
894.816 201.296 mo
893.952 200.432 893.952 199.568 894.816 198.704 cv
898.704 194.816 li
899.568 193.952 900.432 193.952 901.296 194.816 cv
905.184 198.704 li
906.048 199.568 906.048 200.432 905.184 201.296 cv
901.296 205.184 li
900.432 206.048 899.568 206.048 898.704 205.184 cv
894.816 201.296 li
cp
f
893.52 301.62 mo
892.44 300.54 892.44 299.46 893.52 298.38 cv
898.38 293.52 li
899.46 292.44 900.54 292.44 901.62 293.52 cv
906.48 298.38 li
907.56 299.46 907.56 300.54 906.48 301.62 cv
901.62 306.48 li
900.54 307.56 899.46 307.56 898.38 306.48 cv
893.52 301.62 li
cp
f
892.224 401.944 mo
890.928 400.648 890.928 399.352 892.224 398.056 cv
898.056 392.224 li
899.352 390.928 900.648 390.928 901.944 392.224 cv
907.776 398.056 li
909.072 399.352 909.072 400.648 907.776 401.944 cv
901.944 407.776 li
900.648 409.072 899.352 409.072 898.056 407.776 cv
892.224 401.944 li
cp
f
890.928 502.268 mo
889.416 500.756 889.416 499.244 890.928 497.732 cv
897.732 490.928 li
899.244 489.416 900.756 489.416 902.268 490.928 cv
909.072 497.732 li
910.584 499.244 910.584 500.756 909.072 502.268 cv
902.268 509.072 li
900.756 510.584 899.244 510.584 897.732 509.072 cv
890.928 502.268 li
cp
f
889.632 602.592 mo
887.904 600.864 887.904 599.136 889.632 597.408 cv
897.408 589.632 li
899.136 587.904 900.864 587.904 902.592 589.632 cv
910.368 597.408 li
912.096 599.136 912.096 600.864 910.368 602.592 cv
902.592 610.368 li
900.864 612.096 899.136 612.096 897.408 610.368 cv
889.632 602.592 li
cp
f
888.336 702.916 mo
886.392 700.972 886.392 699.028 888.336 697.084 cv
897.084 688.336 li
899.028 686.392 900.972 686.392 902.916 688.336 cv
911.664 697.084 li
913.608 699.028 913.608 700.972 911.664 702.916 cv
902.916 711.664 li
900.972 713.608 899.028 713.608 897.084 711.664 cv
888.336 702.916 li
cp
f
887.04 803.24 mo
884.88 801.08 884.88 798.92 887.04 796.76 cv
896.76 787.04 li
898.92 784.88 901.08 784.88 903.24 787.04 cv
912.96 796.76 li
915.12 798.92 915.12 801.08 912.96 803.24 cv
903.24 812.96 li
901.08 815.12 898.92 815.12 896.76 812.96 cv
887.04 803.24 li
cp
f
885.744 903.564 mo
883.368 901.188 883.368 898.812 885.744 896.436 cv
896.436 885.744 li
898.813 883.368 901.188 883.368 903.564 885.744 cv
914.256 896.436 li
916.632 898.812 916.632 901.188 914.256 903.564 cv
903.564 914.256 li
901.188 916.632 898.813 916.632 896.436 914.256 cv
885.744 903.564 li
cp
f
884.448 1003.89 mo
881.856 1001.3 881.856 998.704 884.448 996.112 cv
896.112 984.448 li
898.704 981.856 901.296 981.856 903.888 984.448 cv
915.552 996.112 li
918.144 998.704 918.144 1001.3 915.552 1003.89 cv
903.888 1015.55 li
901.296 1018.14 898.704 1018.14 896.112 1015.55 cv
884.448 1003.89 li
cp
f
998.496 .375977 mo
998.245 .125488 998.245 -.125488 998.496 -.375977 cv
999.624 -1.50391 li
999.875 -1.75488 1000.13 -1.75488 1000.38 -1.50391 cv
1001.5 -.375977 li
1001.75 -.125488 1001.75 .125488 1001.5 .375977 cv
1000.38 1.50391 li
1000.13 1.75488 999.875 1.75488 999.624 1.50391 cv
998.496 .375977 li
cp
f
997.744 100.564 mo
997.368 100.188 997.368 99.812 997.744 99.436 cv
999.436 97.7441 li
999.813 97.3682 1000.19 97.3682 1000.56 97.7441 cv
1002.26 99.436 li
1002.63 99.812 1002.63 100.188 1002.26 100.564 cv
1000.56 102.256 li
1000.19 102.632 999.813 102.632 999.436 102.256 cv
997.744 100.564 li
cp
f
996.992 200.752 mo
996.49 200.25 996.49 199.75 996.992 199.248 cv
999.248 196.992 li
999.749 196.491 1000.25 196.491 1000.75 196.992 cv
1003.01 199.248 li
1003.51 199.75 1003.51 200.25 1003.01 200.752 cv
1000.75 203.008 li
1000.25 203.509 999.749 203.509 999.248 203.008 cv
996.992 200.752 li
cp
f
996.24 300.94 mo
995.613 300.313 995.613 299.687 996.24 299.06 cv
999.06 296.24 li
999.687 295.613 1000.31 295.613 1000.94 296.24 cv
1003.76 299.06 li
1004.39 299.687 1004.39 300.313 1003.76 300.94 cv
1000.94 303.76 li
1000.31 304.387 999.687 304.387 999.06 303.76 cv
996.24 300.94 li
cp
f
995.488 401.128 mo
994.736 400.376 994.736 399.624 995.488 398.872 cv
998.872 395.488 li
999.624 394.736 1000.38 394.736 1001.13 395.488 cv
1004.51 398.872 li
1005.26 399.624 1005.26 400.376 1004.51 401.128 cv
1001.13 404.512 li
1000.38 405.264 999.624 405.264 998.872 404.512 cv
995.488 401.128 li
cp
f
994.736 501.316 mo
993.858 500.438 993.858 499.562 994.736 498.684 cv
998.684 494.736 li
999.562 493.858 1000.44 493.858 1001.32 494.736 cv
1005.26 498.684 li
1006.14 499.562 1006.14 500.438 1005.26 501.316 cv
1001.32 505.264 li
1000.44 506.142 999.562 506.142 998.684 505.264 cv
994.736 501.316 li
cp
f
993.984 601.504 mo
992.981 600.501 992.981 599.499 993.984 598.496 cv
998.496 593.984 li
999.499 592.981 1000.5 592.981 1001.5 593.984 cv
1006.02 598.496 li
1007.02 599.499 1007.02 600.501 1006.02 601.504 cv
1001.5 606.016 li
1000.5 607.019 999.499 607.019 998.496 606.016 cv
993.984 601.504 li
cp
f
993.232 701.692 mo
992.104 700.564 992.104 699.436 993.232 698.308 cv
998.308 693.232 li
999.436 692.104 1000.56 692.104 1001.69 693.232 cv
1006.77 698.308 li
1007.9 699.436 1007.9 700.564 1006.77 701.692 cv
1001.69 706.768 li
1000.56 707.896 999.436 707.896 998.308 706.768 cv
993.232 701.692 li
cp
f
992.48 801.88 mo
991.227 800.627 991.227 799.373 992.48 798.12 cv
998.12 792.48 li
999.373 791.227 1000.63 791.227 1001.88 792.48 cv
1007.52 798.12 li
1008.77 799.373 1008.77 800.627 1007.52 801.88 cv
1001.88 807.52 li
1000.63 808.773 999.373 808.773 998.12 807.52 cv
992.48 801.88 li
cp
f
991.729 902.068 mo
990.35 900.689 990.35 899.311 991.729 897.932 cv
997.932 891.728 li
999.311 890.35 1000.69 890.35 1002.07 891.728 cv
1008.27 897.932 li
1009.65 899.311 1009.65 900.689 1008.27 902.068 cv
1002.07 908.272 li
1000.69 909.65 999.311 909.65 997.932 908.272 cv
991.729 902.068 li
cp
f
990.976 1002.26 mo
989.472 1000.75 989.472 999.248 990.976 997.744 cv
997.744 990.976 li
999.248 989.472 1000.75 989.472 1002.26 990.976 cv
1009.02 997.744 li
1010.53 999.248 1010.53 1000.75 1009.02 1002.26 cv
1002.26 1009.02 li
1000.75 1010.53 999.248 1010.53 997.744 1009.02 cv
990.976 1002.26 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Zydd) ()
%%Title: (g_bw_007_003.eps)
%%CreationDate: 6/7/2017 6:03 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&l!)n7dKb(_ch#B\TU]g0^lc34/L_hL+<VV++X)2A^jq'BM%++[]H?S!IV\2mQ<;GFmrdubbXpkn=*7O/f<+>@maB@L/%r:W
%?FtQgdeidPBH\g&pa]BB*pY4-Z@Dl6k05:@\#mJ[1"DqK')p#5'`Te-,K8ZC^"p$T<ql6/^UMr9%*DnSf,re+b.jD$kXG(CmPL]"
%X\PegY@sc]gcY_1jeqA;old7@hWl7B:F"\OM($+Po=G$BJH3>0HM7=%0p":tVl-1"aN!3uh`b?QWrspNRJHchFjM2"p7%uI?MEb:
%(0uBh=nH=lUrbP\fY&\a5;R77>&EXccT7t/BB2_%jlpT7,3GV$-V,*dQ\LA#Z,c!&_LHSrY^[E$r4amc]u"Osa[gD7Y@"JB*J+[_
%3)V3\(5=!3<.L2N;A*2QX*&g<BqDcs\Oh%EZI&;P>6J-$+);;2&c^<O!e4j:TI5V.r'P?"fl$cS?M(&DghZT-ZWljiDRTQMSl$-@
%1&Y[$]KPSfqX;#_;eRLD["97r7;oB[Jb!-_HDa>q19cZ82C5f#rI`ZM!3t-9_fid"Yd=(1SfM`+s(W_"&lZoQP?)n.pRY>i8E1o:
%o9:;\e5;o^,W+,'f*U7+O3@r"$-7$2;ce2QY^=o=+1/ZSXD6G_a8P_'a'pBiSGsf+)gUp[@K/,eK$C3kXfbYc&`:bJ!NP2"MbU9q
%Xh.[.Nj8Bbpi?W.g]aX#H3`T8s$?BE`7]u%K*^@Ap4/jm7D]$%a%O.5It-97K:@r!]sEp#h>Q1ps"Ujmf@t".TN8fBn_Ml3L47"S
%qtP*)ffkh;KHGLNFC[%TWGC<S>FjVB+P9P[h7[L6fg!$)nCO4C\(Qi+L6K<urY+]V_*Tg2e#jr3*qDm<pQV&DbX`Hb'F8S^V5j8d
%[+C*4Z5:4.q$B8N":]%l<kl0QNsL5Z3bL9]p%j[!^K[%>h`O&TdBqH[)`WQIk=BqRnL@^[rcPm&la-o;:1-V4f2l]k7!ZQEWlo/N
%cN]0P<j1-FD9E+,/WZD#.J$5,-*D2m"`SO'KpU%ZVgZp1SfG1_lf?[QG86[dHR0Bn;QJF"3./nL<oo^EH7Xm'p=dkNcP\/a/@5/U
%k3;:WN*&1?B#!05UbC`fh/@Mr<?#eH[81$+H1d1ncm=T.&"=q;`ffXR8M<%$%^1]X'sOo]l-#dYHh_&7rN"D!pWhUXh;5oXoIIKX
%RXI(Xdb!19m`Xa4/"25KRr.XQ>-:[A]u%NNO6AqE.<"1K7[D'Xe228JkZlP)/;1h5A"74DfKLi2K6;6!r.VnW_:;>Sr<qK<d>R5[
%f/VL]-enj0<6$&Y_Jb)(s85B/(Gs)=1(0Np0^A5[H/7i&$b=5g]\^31hP5NI[D7Rt_3Q$_871i&Ik+hE=6JIf8/i[nkeU4mjs'gK
%-Baa7o%9"trZ=c<@AD?DC+r7aLN9eJ$Ac4frN7FhDX_:c(Rq>Us,.1>4QhOjIlu>U9*!l3.9(6d*UE[amq'7X!j:mFO0]*^i//I.
%Ze10J#5%COL:\O6CqKo.oGfIN7l10/mW>/<!d+!^Hfsb&26a1*rI34[)ipBdUKW7i]8,e!?GG#JV*oG".6J2d)uhtt$\o[=h-8^O
%pHP/G_>U$,_m4bM4(k]MhADb]YR:Ph.;-"*%0)joVV5b5oJsHS90nbn$icCDj9j-H(B;,PnUGFm\(<c=ocZ[a^"oI7hNa&,7K5#,
%n\9!ujPkp(g9YZUG<2iVoo,q6h;A5$s8J[1n'A$F$WqR-5`U$U_Bc7-49<@Ws0!!I2e\piLTbG0BWdBFEV(2ROIIeL-DQ-P>Go_/
%G[g[XaqXkkAZkJ>n*Wdg+=KB[gUX/@m_3Nq4428DF3hQ7iooe;bi5@bj6#:@2^?cU-b\!VEm7A6G,<E+p:ZZ5_pFVkmIiShYM8Ws
%B_h#%(VOYq@$9.@T@Tr?n;!4K)A!p3iP!c'4,j_pqKGfip7R0k[F#JedEjYqB^$^%J]V4_)RPRO3])7%JI<6-p.omYc2M%VM[QX3
%K,GGTR7DI?dY-eqq\SJHh?/&KN`7EhT.;K+T\\:db9$:[%RcX!m^q)_:/dRP?Si(3\?p(N_ki(#%Z-K*\$JNjjJ6U8s(i0'I<-]%
%O7IG.2/)[_CdhR1J"P0e^U_h]Zqp_mO4";e_J[4XbI,_eZ[6YGMh&!X-OqR]T3nu!g1SHg?hjU=FJ1`UAka.>6J@r!JRb(CZ0aMa
%reo@cciKQp)nmB2,3'i4=(eEYJEBLlAeNpM$!3eadIPcZZVJR+qS(K%@*n#bi\Shb28O#WY,m,&gHISZ?2OAq*tKtP][>FT/fXLA
%*UUJYBu6AsJe=Y9W$rPg"ekO2g>,d4'DC9[l`-dW!<B8W@+naJq_ZdP-S71Fb/LjEH`)WVp^?aSYt46[g$53f%"*"#a)7f'!rW++
%o`'YpE.G2Fb7Y&q%=.dQK7uO(5s*e7G+.5m5E<W+g?nS->'i-%G]`[kmr\?=CJli$q[]lINbT"^EVt7Al?>`Z(#2s\F\fLEM^anc
%Tii7]Jbo4N^P6K5B%75h[oQ!'<$8>dGC./NXo'2CEsWNfR>uJpHeaTs:\-N=kO,b`e`#>O\C''5)uMW[g9MUDSuuCF";)6Ydk2Or
%L:\#2!3tuDA)HfWLThtZ-/tm\G^;H1VpVfR9X!,3[uUt5g[^mco><STi?l7]0pZKa#a3;#fiOqsj!qt6g?["ud99ZKZK>Va=)9NB
%I!L>RQTM+a\Bkt[bXfBS4=R"BcOW!4]1_0UDpWZ5l*<%Z\+O#kh7<Eh\'m<f=!RJl#G[/Vb$iiF:?RdLK;8.^%N'LKd`4l$oikhL
%TS4lh0.@5l6ni;EDi&Ttrf/k%-^YYfLBALl=`4P_"VEZ\'cVI4q7]U&[&-896N<`Kc,"+lZ,a.@>LuXCEj<,'(HD@0PWd\]`k;H0
%X(u^\GH"Q5\,2>2ch-:oDou?^0,?>9=s"Et(?:pD(Aq8'im*F&M]IQ?5^Zn;2F`WE*Un9U<q<VAEk-p0ZldeIJY$+kVg%EqBEh9:
%j3:o;o2i<Q#H+YQ%_Rn<4#CVOle!4pZh$gqhIJ1=\%b.@?!cr<Zs;_';_a_3>r!nr[0H#NDYUdY(\RGAN9OUpP=kQBgRV1PV1/1V
%m'KQLSbmL-^bksOW[;rd%IAt='\VkriN]$7K_lrTYc)nKm,1(3M[K4Q)SLS=[uLV$H!\U@G`s3BqYt&<$g/5!(XnJQ)Dk:0#E=WR
%BF<FXaWs'ZfO22ABfTmo(B!b:9*`'VS__%5(nS7aDKg%CQD)YS9N/hDLNBPM#M*U\>bO/O_2A^]3B03;[(<b\G2Y-6`<PNs?O1$h
%`kurG0eOj^Ld,aKqC^8/C$e0@ARU6^2elkSW`KqZ\_Ne4Idc@'1?e88iO+,;\UG)a^9h3OkLaMB#8]NgD[$W&QbQs`8tUi]>uiq4
%cffG.+#j'eK+Uh\:c`jY?!]M?Uokg,G>B0)SP)F:/p,P!mr^9'qQSc5Crc3?=nf9-@.'YhMqhD_ZI;8Jn"PS$BQRG`9jAaM\.h!h
%0U3M\JfuZNYFb/.dQ.]WCH;R`a#PP-35f*uXc$?j9=7N7c(POAq=^bP2c;3-)uKY`dMQ;iOE"R>:orOr?.bkT[(;t:Q(mFU1p=r-
%IAlSeqLZBHF@f>SiE]\=Y')[XB;"FPm%*KL1u_>g_*sEW9'i*SD+6\*G_lY,F/HbghAB4.s/`hZ&QlQ)RE%D)e8%NbS)(4T+^@k1
%dM]sjETfj9]PD=AU@$MA9`8Dj\/0R]g"_&LqTE^IV`8U,Fprh*kl'$lPY_YK=RGNF-mM<r::PZKf7a^%0A/EM]Q>XI%VK(6\EoJ7
%1n2"l^cbZ2G*EsZIl:uBp3'O,BDkeUflDh2l#9oSp$;"Kg])/6?FTe./QZt+JXmUF*qu.Nkdf+gB3oSmE/gF!2K71NpO"/$72%.U
%_fbM7bhoR^fre.U\3<MH&91i\E71hh'U^i$9mFME:A3(XU<t:ac*!P*"D^Subs,Dc?rl)Il*QaH<^/2e[bU+`[W(oV%23ntk3BN\
%Ys\8h`s4Rn=$rVQG3mnBE*Y-?L=[?]@R39CmRl4d\h%cc:S6e6C24Wp.H"M)kgcf]F,Sc`DVoA]R"$H$]inN@l9@Hr]Q_`9p2']]
%r64Q6h/!L;k]]hRo_!Q(miF]@TcW%Epi?8N;ZCPl>@/$snsbJ6fAh+[qK)=;5/+:Ds'+O/dc12H?to+8gkBL/mVc@rgJZ?m<t:h7
%fiVEWXj+0Mi8O*=UN-1(;V/qF8#S+G?,(Y<qt0Z*p#jpAok@i`q7*mgJ7^u.S9q3<T<5;s)qul-41D\mRaqB3fhSZV)d0G<]moYL
%bOS]eG^k1E@C^_lQPPY5^Fn=]1lga"kAQrocTL(=LMEd$epi'sFgem]FZWgl/9O/3gKus'/J#0`a\[on\@&o;D#@I?Hus_)"bG*S
%o%V!i*aIOt[JG"6l*Ze1r9'($c%YIh<oQJfmgQ3FIa61)Y3i*)B$*L6rVkgI9mLMljlQE$\Y\lj]CiIPG3@i]B@d[_n*W)pn>\X\
%[_Hh'<@@=mB%CnXpi3M9mFg>gkN8Po$iRUhB?M6`[sk"OZV1%b*D38"hgbZKBt:j&qfqPFMu._)j"Cqs=a#"n0:2RJ:Qr>aH\iEH
%]D?@5*a12.h9*0;]Q^PbhJL+s:0p&M=dX-0FL'N=Cr=;QRnMkl`Tu8oo0nQ6>$%>Ff%2!UAaeC/iqpF8pVbAMY9`jNpEl:":uAgD
%O6*_)eo/.P<"E&jB(^`Vkki&Q3;In!`Tl:AiiVlhF.`;2NQ)pp8.$)_C>tdKSgsRkpMbQ.>V0is4m2Ctr7V[I-9d<bJD^t.gr"n_
%o4%C?_#koqqn_:j]q6smdF31UK=k89WN?@sXZUYSI.\s71Cr>OWKn`3H>R6d4#QbIC[amZ:\s8Bo%**P\^gYjc[W&SS%!=;kacp9
%MUsdO]N]hbY.S)she`<rqXsM&St9(^+1Jt*K7;6qT@U_(F732[LZMV'X$=).QgLFAmf!+ERg89@rga2GnDTEZHb7o$($;"#Nh7u>
%g:6a%I<B`%3Ob#cC[M60J^]h&S%2&XS%mUOLH9?+h;:9l@sRCnkulQHOi@i6_ENnhrG,H`-M3s4-#W9Zqm:S=5l=`3Zl6,t=d"Gj
%`?1$(X+6<oo5cFqinN\g)K+@"iS'('n9K+832:X`CVlrp[deV<qm1rpZT*/Ls2Xu[rq"-M]X[W+bhi-'aI3OHLd$/i[+8l-S]mCT
%qX)\agdYf0it_F,`uY[JRqm?Ve0X<aa1&jola,]hiS#Ed^\dHdEqW(@O$8?N:HIs"K`CReD..mkW-^)7;<rK6eLYXPfUIN0k$bO+
%ZLRI`:1#IhP^E<_gP=(\-=ZLI]r8g2o_&(Ild#J%eb#&mHhd@@DM.Y[JR,nblYEP8[\=RE]r/-5OZ[nR:UR@^rGcjjjlbmbnOf_V
%^:1atpu)FuGWt9nS?1!0?AeD[$ea_)\,1riJaMd*'g9$GBSOgcec"5u2!E[Uj<8O1rJ)bD7#)\PJ)-:R9*Ytki->93F[mHi0>G-0
%3uBSoC\dAKk>)#_Z`luqRt!)!282?E=hM7b1iq)O?[SBf"@N-c[s+9LZbX1!(qPoUkA5"t_67_Ujr(^fJ=\dG%R@k]Au.clA+'?F
%_*3h8]@YMsjK.ruH1T(_dbHF?Ik308.2u+Ea*SX62K#WBT?b/(Dk:epJ!UN&Qj/f8V>fnr>PuRZNdCH[ihKRd2p7dOYK+sa5;1"%
%B9(U%YJ$4rH*Xp'=3j&o.,aC.6_H<'6<\E666'*%=L;d%T?eLAQLcJ/bndLNafsM<=:e+e=bh$YhSRgh<A%_fT9sA`JljK:7+E9\
%NlhXWG9"qhp/[/6X:o>=;EtPgL+O^6W7L=X-I[o1ZAY_Kp<co]8rqQ7Z"R;GjKUS7*sM#W:1#S>WHXE]YKtC#CJt*ehj/(G0"qW1
%JXc;\m?^kr[q4I,=O$?aWdha4pL0"C$"&\%p=QeiW+sJ)IV>3cW("4ds2goWpgDWP--ijZ.Z]:"i%$>+g`?6JfUuku%QlAZ`i!Sk
%Tj8]meb5^V<)$YFZ+8@$[RC7uZ#FQl&jQN!9cNpu)`8V&9SH6]YW>'gAV333*3'b8ENL<(Ekh.*D"uCuo:\]-%ujH<APCE<2XCYl
%<2m$mk1O-n^Y@P1JqdJ-!ui%!brpL$`;T5!r/\WaO2Vs[NCJ=7CS0.\lkPqAL9Reh^C:!mGF#_p5OYa.h/7)G4CDNLmuLqg$ZF@D
%NV+AH52KMYG,Knp[CEVc0=N"<_@?!I<f`QTYJ3.IgY]^uXmI2.]#F-H^rJuA?_9R=$%7rHD49nNCi+F:6`R:1/Bg:eTCDO&fe<?$
%2`)V7Y:mT(4]@T#B5^#:5(EQI,rB>tHY`FoGP0M7k-t="3k(ZVj(,Zg3LX.,HPq%A0/!0)mu?2;qoA&9R&I_`=kfM)]"=^"`Bl8d
%9NH<H<a0e!Sp6T[*2mL_Kl7pjSUJUe"gbhfZ[hj%:4S8JH>fG3[YfSG$J6,?G@/#]ZAa[7!sQDdqWWJcH+Cf9KcI&kjlGM11Df?e
%3hS*uEBLKIRN[/BnhZZGe*'"Ncf*^),NC\1Gd]p[Y&>dClG%5r61\qTj*L9-p%aKZ%5lAtXLq^4HtVQcc*+&+.`]jV-Ws/BKi8^Q
%s$QatZ24**f(:PL'+\nAo*CYo:U9_cNNM;Dn"'XJTpmf,]dDpe3OhX&C44.qK?#J_IINZe##L;O*`Q-V]ioi3FL)/Lm*-_,J*b&&
%r9<7*5B_onm_4!-/9g-E3R$K"1Y=frhWuf<!W0^:AG>Jd=(:FM[DGUM\*gVr]oLSgMZ_tfdIm)"bI)\inb;Jf!acmSE!&U]Q(o.:
%0N!,/Y?XT.L\$7=.nAU821NMP5/+LMgkkPu4WBh]l]q.^[4_t:-!UECp!37'[I+oU:N<^#c5C!\2su.?Ze^UR.rS`I]b[prO'`f*
%cT^2jIe.UO4\j,dNU<@d1ir+dS/n0f]T+pG)P+p$=0;Hme[BgbeGar'2,rUt\\?S^+21\J?>Mj#)XbY,mf1'/?lADLjjQKiX-8er
%/*^ps:?LFCXpmOLcek%Hqp-)6N@jh(d9btgg=lI&s,Uegf'gi..i>k+@0/:#f7hi,g\(7.Ze#]7<k5TIo<#X3rFYKK]u.D*2S9KW
%T*4mrXKF*s4BYd7f"^go+K^NjCMOHkW9_Pmd]V/\KjMJ^Y=)R#\Z@/O^J9&o2\%[\D@EkjhL=-!Zo'F"/:7Z"@dR5W,4Z)A!J0#b
%fAL4X]<P$NQd7`mjBe!VH\nN5m)R_UbKiC"Hi,E:4FaoN\p%E'>6rOP!Rpj7nS7m\3kq1#HIj2rGeno3gU83"pKBe![7jL^H$sn5
%ds.@4d*43=,#Aa#q=7hjFm](8S"E"FK54,p<kchg=4j36+,n&4`_C-*i[MTo%b>gkIVKC?2Dfl4VCB6)Kl7s("-m`<38#:#T6&Cr
%;6I=X^:i7r%N`fA*..Blf66?:0?\+-GQU=lG0^)<WF&t=>(#u1f':`Ep?._5rJ/D`RldeaQJZT)X^f,Vq=na6Eg5q`6O/?Q0G!TS
%55i-6#<e0X<!:5+`Q^I:o;u4U2V5]N^\)Sh+.@#BPM_a7I5WlC6S=EA"j"A:\9S4u./p`kIq/)SVH*l(e[L1=\N>+%I,EoS3r-M\
%D<_"Ydo0?@#!D%#C\i-_*@HOkkuM;&khb]Bn^GgF(QAjtb,'7:(I.Zgn$R)KGlbY9r:9^La!Z)rN#O75c9X>^^\0j@\Z"$T45%g5
%ql`JHgi%V14ed).HS5ot\(BbhT+Vtfdq!_[?2scrq"2jK/GIU&2AIcK+2GMM`?DiPO7\4Jjid5nUCi$DfLPtqB5ji"]nIiIoIFl"
%NMs>f/\I(b#q17#o,J[q;4hY&@/\]@`RW7'l5aF,+MV3s[^s6LUK=o(\<-j,eZ7g"_l(1/+ORM]m(M]OSeNjOmj?5]m]AWZ]"`7u
%]&cDj`L3S%6?.`)o[7dRFmnGWIduIdg8ENdXcXq^IeI\uJM6N[j)XVXeK&J5@E:D]MLL$El@W9$Sd&#:pd!"`PS?X2CKntbnWs*p
%n#Q>(#5FAD;8_VpjSF25r:OI2>WR-,jMli5l#Le<BXtjunsuCGn$elHf,%La"*J!V^Ac1$^$XCe;L['o:.q!4eZ=V\47p/c9<Sl0
%C+K12_bq6lG?u984j4s3_=u3X:\R)bV^5d$>T;T6ru8bpcWa'2pUAELi=GUfZdm(M]nN;007P#HSickXV>jZdQ6p_6qX(ItJY@mb
%@sB(*4bDFZ]8*M,5AYDM<7iBj?Ce2^q)0(kcL7j</^E4_q$mu3n^kqRX+tC(1iNADf@eP!EhMhJ1GJ$lS)D2$h-JjolGJ!'hEML]
%imY`q+-1?C?[KN:^]*VBFhcOHeDRccpZTFE#)>CDQhui>mm_JLK-!C7bI?haXl&pCZQ4trk]$4b_j`7I3ss4_\%D)n%@l5NlSD?2
%[W)BF"\4I]X0'?Z30?1io5d;9-B`RbB(NBZIiFoSa$5nt,qBU?j,]4d(*B,Q%m-W\No4[@DU=L8@/c@=peIqCV[Li.i/j)N<(!KQ
%eSjb_X7dk4a8/8LD)^iKeI.AiReF>+S8GuBLZe0sol=trJ**89T_4r?kK0(lV^am?pL6n7]63Gj[4?CQ+nV7:F'])jlh9itFQ]do
%E\&96^B&$HLt?f7p=%Qg-RZZFiV=NUHCE7Rpu>8-_N3:0R!\>he$G]ui&1.LV3<LeTUCN@Lh_lBA9Z=<k]hGm@=PQNC^nuG?9FX8
%=#un9+!^CT!,99MHtR:D?G%<TpI:t@)p=da$Y(+,1"[-m^[5m.Y0OfY[:^MYUGJhAd//Qt\[AmCL].W:SSS2s[J]EU;%Ma>PIDJf
%S\DjgI-VQlmXK!?,1UoA04=]aCX<1(C+aH^mVf;R]t-?3D>7u,U2gcO5_"01"0,[Ge5Zt.\D"EY(-CigTn>NYD=dZ8Ljf)#q/WV4
%5qeV9LP&BV+"2-m7&qBQ]UA_S1ROMQgXkmG)IM*^>6!HiX'rfnSYb\j_:ir/G]8OkoS)t+B++1OjPB@aId>jmA$GgsCfpAJ?cV56
%dKoeb[l$9iSh9+e-O7I,Jqi/YDjjJ;$1,Y*pWm%Ad=JfOBD$/XiF:#a**hV#Pn]_GN,Pl&0-(&F2p\r+/r-^/R5))Pc4XF`L:.7F
%.>ojF2s6Ocfc8f3%TPk5?/%O>j83l2d.d]K76L]-GX$=T/*^ed:VVDRomNDp.\Dr\TD/?#.G,_8Mf7[ce`Y6ps);u@;)\'qesj/"
%QL96N#9IUQAhFkj^NO&4s)\CIiVeu%\".VfBLm#i=;oD4pga!m1C<9[^2d+1]%TjYY<QT&hp8mDCq"]'I'@pYl9?'Icb?dZ_d@W=
%@%)3#fD=M'XoY@<X5#C?LF4mT%Et@&orYb09A(DfZl&m$q-%C"HbDjiePC(1>OX/;p\+<(\*f+8S_#B_Kk0N>LJK#'n8(j$r;%KO
%H22=?D#ME+ZU<NaELS:N$f1V171UVji%\f,i[;$]G@;G^rk"T[m`rYaNH7H2^PQHH.gGl/L?-&R^\6D"[,K&p0Z:Xbo61Yl[[4J[
%AQunEMPI#?)drU6p<YQB[e,VtG\<ScKB7@Jj[l\<9's$,HZ<io:AaJIir$j[/'Ibd;j;L,NRgq0FahbaX`#;CEW+J(a'./%IeEUF
%`a'*=@S;M#S_j8Fmu#]Zqp"Nb:RpG$?2JngIBD_@f=lYmHj=0-_T/,95P2QhT7<<GAn1e_\\cs2:[e&/G4f[_nmZdNSTUR=RA1)c
%kVDiNn-*."hZd';pp@L!0gAc;gN"Hf5l9=6_=H1Bi/[g0]_Ualbb/TVp9g7r=6QI8H%>j*kMFU=eZ\A$f)rNC5rAOqGL5l*1?=qq
%E+s6!okC>Z*cV9kn`J$fopOtn3BiqaTB:Jd'+D"9CH"_iEK6Kjm;/o$I[D+Tq@bn':\JIugFf@N.VSX3B$rHk)d]/I\(:KIF+1[s
%kh>@q+#@7-G)@rRc`ZZU?9p+>qmZGu?Ti\8msTGi"4jj1NUI.'1ZQK](`/"Us-n]\^4bhMqVLnK=5('H(>n<+?Ha/2qr[%705V0L
%FrrmK;=ACngaM$]ID/PuCu\2-FF/UTqMfF:>DKhgW9+'Vd-npnhHRH]3D?T#W%gi4)Z;#g*:(&mj"AI*X6\Y9g="i\:$=9/?=<SQ
%K,3i'h$T4oe88'j'g0JL`Qcl_f&><P::JpE%'IB6fp#Qbs6=WbT',M/?FW5lWdL*1SjLroSNhn!ZI^_to\:ktI2QtfcPqNerscCq
%B?f@#M"K+F1!TB1k)T&*7)/QLJ'b(1Ck&c_LRJ0CM^%KEDpT*!^XJdqqDXl77BbJ#4m_p'>IBHj/o4Kt^7\c]Q0PJiSVsLrc"E8J
%2#BdO7Yu1]M-7!`Iessb[Tf(=D6b.bkbRH(.(S+trE$1PZuO2:VfN_W0&8R<0'h9l=PGEOassAR7:R3\4#h*dIu=Q^Y4)EbNeOSX
%=jc+k;_fO*mdp/@E6,4IS94F72o.]U;#s`iY]ER[\RK<>F'A(M9K-%On_Bp!=(T&*I$=#1I&LS$\)5qSSoV"4MtmMId/fW4h-G9_
%6Z]p.FkRWQKXHd$/V6KnrY?T#7]1)e`]_7]0'l'<?=&ra_"'2C5S=!K#+G?HH,7/,n7;.Jid&*?osXVLQ_\W*ga8<V?S=&r\`NZ2
%oS)\`%VFP1dOUq[D&@&k+PVpiQ_62jC1"@s+_G<LaR&_AL6pB<Td.24&#F@RC#bAo[6oZ*?C'VZW:\Z[-ZOpaY$?.-C09_DpZUVB
%MSO-?>$XFq9.G":T"'("m-Zb.Qb:3>,GKI(im.UA*Pu1tiMS8&%pP1<g(B`O8qZ>7LTPGNB`<ijDg!@q9$@p?SPW]qN1'j]l&QM2
%m!Xj!r-]7fIh.ob8FU!"Zfn1eXRH^5@98(b:^n1dctmp$G*i$!?ktO?6,cSa(Rd-@m@g3/<n*u\43a_QAA5f4cQH<u_\9e##%tQ'
%W:8:(.V5=C_RO2V+$eip[-m=.L"_1CXF#U,h](an=mZd0gM`]hr^%PBmfNsL\1u.g$0THH]@TdU\_N+5b0%o8p&OU>87H`S&C25m
%LL(KFTnT6-F-LRZl#'P"YX+`SOUULLSX7KS?0I!a8ahl$UH)Hh,pJC<R_k+"W>dr!r5T52Nfr(/UJ''M(g$%/#JYVs$I`cCr>eN%
%X?=L`oXo6j`DFtNQkc7Ao7-Pe5QC9>Drp4BT9,d@ma:Phrt0WH.b_*kbm1+(>k&0;0c^2a+5?hn#M=/7r1C_gE7GI.1p$eq(pK)M
%h8j(PU0OOS6HC-("_uUZnf3Is+laQWk7ga7OVC[6R5NttMl7oHP^haDkM'O(;TtE,K#A4S,R5%*$91eH-Q5R=k.VUsQSe8$$u+`N
%<b'0a/7Wt.(<*bbIRY8J@R?%p`E?e4bM)XlH2Hc50CpP^^XH79Jr,hFgUeuoG(?[OjlOQ(`bJ2>NR7IbX:O&%eT<6KL@PCS0!Hub
%Bfr$-?Y1P*kOJd@8!%=$IeS2eF<BoS""Z1d\!-aZJW8Uu,nGSpalZo#@D`Ff_Z*UXa;PpK#A!<4FWm%7"*m7I.=eE;67+0#-=o6i
%;954-KX>p9J:;$ZDRs[^7U2T8b97M?%S;hKE4i#5]Z??.orph<>O$T,Tn$\(G.bgYgCm7DP&FPF=Wuum,UZDM+?B<-DcthTj6R0C
%B0s0s1=@98=K<n:&:$XD/CO#-Q$3,"BLnOAT^#"0.N&\Z?i\EFJ2M,<1?]5?6NbKi:?nKA9KGmM%$=)&8<U',j"1`0AL`*c,Z#6c
%XV2_T'9]HFQIQgb3s4(9(mh5k)R;ENK1J\/F?m._=l-He%EI0=`2*#/1#*S\\^C5;onB-&C2d!IG`Y7LJia'b;'f*B<J+A7+Ug\8
%+bY_>?5OQ&QFPd:5>hJAh6pE1Xu$kELI`[P,Y;%RnWjCS8qN8dlJ_/m2pr[^$PWq>7W$Iem'HYAlN*C%D6"m3"FZ*e"DS/eCS0]?
%CYNj1*C<LnLQE`$6Kh*:=,0&2(U8c13lLM@pBPrm3BUT$^l$P<%OjhD6m6%EPh^D9U&[_5`&QUrSH3t7$H$mj8CJA?DFfml^%.\i
%"asY:XqL./n<QTX&a0j*=C9CqB%_(;FWe9U_KT#."hIHt`*)0o%4Kd[b?<E(h,sQ)RZp"/7f%WbVJX>'i(ef(U2LH(YNZ/kL,]?)
%1DL<HB(?j\_H]DeG6WG;O[g&3NH[=uWO,>68kFXqE_$hAJS-Pdi:F&>[;\(O0HTOV)b4ldHVS(=SV9ugLi9r<&Pf1=;$/7])U+=2
%Otk4eQF6*=erGhe8k2EB3^P0jbW,`P9.A=\^iN27I2B];;AK=i.JV%'NeX-iJO_;&'X@d>K%1RF"sVu09',mMPbuD`P[`DjO=Z,W
%d+)+T=\FBlXgP?c])bT3Fe"60G`l"YZa+;R+)iNVDs\n1<Z1*_+N:iUXE$S3VA[sjY5QAo%J6H<"$P'AMDUs2#rCKYTVs&<85'Zn
%5(LHY-kUaC=cB,L-Y4t_(24KR!\j*gm^=M,]SI1#3$>eO4b8u`<21;:C.b3fP!C$MCM?&+J[=BPiNAgl,#<?[N[Hi`4g2-9p'%H#
%+J,PhEIEDgJaNVLbdo5R*KZ5"QF3f2_m+B>Cf3;]2V]0<!`&BPFTr"f16%lI,L-<5g_TrXH%CE.0+A+"Z_/0ik)CS,$eGuJUjrcK
%k*re(&5NW5.Y9NVpKQ"MRq!oWfQ3F*3q:u-!-JSVcs@)MELJpX@uuC/<<9%qRhl"A"$K+!_)eRmD2b_nAR0YB(&.O"i'&7!]h4/r
%Ri$eL>MpD^U.uG8fbAnr\.H0#IRu/*<o?NCTu#uO6Jf3Q/YV!P3XJsiYX.[5+-O/;[m_SP^nuAbkX9&NUkAn3hU931I^j^6'+!Mg
%AZ1\<3OM#RZ-NV$\/qd)"P45V+UnpH[dO5t4!7]'/8n\GNaqGf`M@U3@\cA)<D;!q)91?3A/p-M8^=XEF?^D_JQ`Y$(_f>0<lcHl
%(h$7d'-=jo5&^s=j1C+'S3A,)&kN@,88LPR>e=JkBqTl$KWej;M1Er8e0L\(D&oB+MPSoTYcm"kUDn!#NY2]hg3SW6atf9*m5EfT
%>!*B;+K<AGo6e,U#RXYa$]9ZGS['>*@:$b^A2&fE@Rhj[$n+,"E+Yp9hpE=^lO6iiA<C&K&P!&C2T]&D(Eup(7<7LM&Z+Gi$m=$L
%JAP\tR`R)koEZnIX5buO)=2DJ$6p1gdu<smBQV8HB3d[>RUd;ZRPl*<oHtl:S5a">M1Crh<.Ws'(RcDXd#@r,fQ%IZ()a9=HV+Kp
%*j4gU7Ml@$N4fWd@"psTiS>8SCd]&08f!"\,d@A=E:&[jA>k]!iMn$uK*"Ic"&1nsC?las;5B\`6H.5UnX;_0+X(/r:U*Al`j2c'
%`nLSB,B01&7#o`Db(9aQ"=I?:in@^BQl[C/3ot$j:@>M7TJ+N1!lL<_P_pL\krJudSF.<n,6tHZ#Qu0j$j_H#G&2h\E,P0gc`R=9
%IgXdWpM+r);:MoiEt%cQ!d[q`?%[Q'"8WObE/Jsn293"fFmV%mjA/6u32m2r(XQ.1Km[ip1JpPt>i:Ql%kmPlT!"g>IYs/HULZ?p
%d8@]GUSDXfO-^1iqD6tcYX$Kb_R60J754:(BL!//[GrbTjAKNFP>At!c2t*=>'PqTeFTq.#5KMd(\i^;ET+:?"k+Z.jKk_T@dL@I
%APIN2(\j1+(/ClL@0*RTl14UhjW_`a09(K%"i/(uPp[8UV:f*=0lp.:=27)#N@0Ye0s2L.FDiCk!m<DZ;(=Zt$n/V*UE!L[&2+[`
%V%`2!]MXk:d(rY^SrV-!6WtAtJ7lO(&PRYM<$n-to^ii-N+"5Pg1n9nT8X>#;N1_;E%tXcLNe"E1Go1D16'O0(HdTWSi;C&djY!Z
%d8.d`PJ*]pBZEb3785HBG>8o-@hfo+c)?<RT#U:3-)!pO?cgqqA!gA%q1NtIK`f+J.eoX3T]]]%%+7^&@$p@"W,qpUO;<u1d8PuM
%QERB(U[_fA1?,r<2:*k2@`i.a0WGnnQ4^9<-S":*IZ;gcQm8K@<:23'=\ndN"UoTe#_]g3SYQGH25hmg6jjc^W$APJ-/mPu,JcQp
%H)8`5'duelHQat?TS]RKD*=XKb.sXMJ@>O72>CfYAB[BQ[[prfZA`@#]8a9)9L`t[WCD*jKpYQeE*kG4P(AZE^lM382mc<u=cWJ9
%/_XV]a:`07&Uf)FKo;M,9'e;l>jDY&e%L`KR8Z`oi)UXW+i\hnj$H>3B]r]7-_5bumX0UM[8k$TXHJmm>%5>M,TXH!h:i2N32&G@
%E(YG.Z,C[J2=35,^e[F!2lVOSAJV?2R`rWNNcQur_U::$<?+9!P.2Su<A<&3n/sgsa65(6*$73b8gk'mOHIo<,#%u6Mg:V>*eVHQ
%oJB*N6^/FA'V;SjZ!C1m0JsF.;o@Sdn._q(jg,^?i,]&?&"T-U5u*J7)!d]pSmkF"N+G_QN>MMV&]%2A+^>b[e$[jN#1Q=d+;3"?
%!;$;-77oj?h4RIt_/J,Qj#F?!3Ltd!#Ol,=RP[E)YtUP\+Y*Pl&S&$MINtonXbkYMJ.*IIQ'D\3@/-Y*[bgL4$?mJk3U1%KJn'EO
%Z5usuL31fIX-`^#1cHCcV*2g*CG?]H=](%!-HU?inLE_h\euRNPF>_nne+1n`Z5HB.-q7C,K?:bSh"_)>*98W8f!N)"`="i+LmVc
%bV$F.mRVjUA1YN9+i"7g3p?oialT'#Sm[fT>fIE+a\%m'/%e0pB,0cR]2R,iX<j15XD+U&_L41KZ(`Q\X7^Qd94C.nBh9I:W=qjR
%#Hn,\@;+-$mekgcac7`eBUNK;m_B=:_kjtEAd7\AYAoCDUTp<`h<td*L$(b+/&$,2&aUq]GP/T*7R,4/Cga3JCiG8&=b]!/92,UN
%rTnH<KB4Otg1S&`T8\l4W.nPG,,]2u5).]iMJ#dp36O0@/F^GbaT5HpE]g+0#oUrV&q[jV.c=UP$Pp6V!!T0K-^YEZ"*G6<V>sgs
%%'`P/4<\><NiOF5e"r7g@*_MlX+D]9,s@U""Eh#u!Qq2l_jsehb$&A@F9HB9jXP'"BtStgN(C"J7U"d<.]7#=L*gSJUbI-]_E7/$
%=cG.&K@*>G4&A$?-=_WoO+mrOjRFjL3aYWf!>c!ieA*+"_=7P-\k#ePE!QA)+QP)hEKpZD\FdWMm0+9W?3*hU.QSnd#(rIX@gEAJ
%)R-OL'"?_qGW=NXkQo`Lb>hTtBY7H>N8U_7#$5@uA`lZ>M2bCM2&2)PO-Tk"_0sQcL)t%qQDBWjA:2PAET-%ec%s.uB6`VT=".$R
%RPRl*#qgBFPMAo!rU0fu4\JANVFr9S`+4IX]BVPq.-S1B'r[0*%O`Z02r%qDMLt6#qRPM'"Ns]o[*NuJ4rFB$;%9JHFLndH^^Nmd
%.3el>&VaJXT&No&2!/agP/9phJ>#p+/95!G``*_1_)Vf50Mg2tR0mCk*h3K:*emVtSWEmR+s7RN^i=q$/:gHm`CWS$.k^9in-#M^
%j0Ft)elfS;-_nnMfr?/M[`U&`#hBX3<S"P+Gk!s85ugbkWiB/rf>/oi'dtaY$%j.B.L:9DZV/+^:(*#NHU?SF0s'fQ!#opp^,DXJ
%"@-gAh&1D<UOWK;$ihLm&L7C;!+S%rE*NZnad5a`!a]qnVh-95,or>[KU4;o]#`\W]i.4mCm@rI&Zd:EX/p$5nH+.p@]6">6WIhU
%>p1M^EY8E.@?U-R8:6K9O;HTH2YYrW#?hm8Wl$nCE@=Rkn><V<Cg\(Ld)WqCeoiLhrl.YgH')5>KR(^#$*75sGn,O.k%](SQ!N]d
%(99PbSE(#oEu<Pu"WjMZ9uKLWpY4nL36H!*N#164&M=gKE2b>XkrSGaAOFo^'pucO>#@=`E*=\*&oRN/,*A!8J;96Ji4W5F**OZ/
%I*f"89AH+*2]:RN?;N<tP<5VNM&&$'Rbp(\`C_-]@N<P[`Y9X:jQ$WFF`Ih6Jl0p8=Z[J`/04Qeh.3=f#$F4uSXbH.\$a*DPVm;7
%?Ed3pGZ7Y[UT)\jFi]D[g;0SC!ePF9]4'&L8-Ogk.CGP!L'WU`J.5r1dl5JP5U%ljW\R:42B@L30mG1!"r\Wc70Eb<+rhQEdP.8*
%WV.("/<'grbc;<g85[]FbTXZ9"dmA)aMR42C>aY.4K@Z\o`T&jALm*#CTPUDP7^*GeHi0)VTOI`F8JjUi).I@ZCCF(aF[p#Gq?6L
%TKr;sP>T+$IA5Y`h3dtkKOBHif=W)_p`Udu7W^J3":.C.&l:>!iYW"!P-8.+K`.-<]I'4Z[IoKu.+6@@JOf_c0Ah+NkY)[-kdC't
%CQrB]le63gpn*M,WiUqS79iO<2FtuI%5YC_;gS3ujW5N_n4F?.[FF^"Nrf[`$&)-LJ._D0o6G.G"%GU6*a_N^DL2?idC;B=E59J,
%%giUk3=Bhce,qO7].0`ajNQU@nJ&%+B/E)?DRKnp![WQf!NZU!&O?N4[[prfZA`@#]8a9)9Lc*`f#1a75$b3IM+r/Q5t(40(&%^`
%*eEiP%.1t?7smhCOYk=WJ.^t@S-]_B6?2l:TT,pj9Eu[X.JP4"V![T=AH\6fj85.GA>iG$E*!&Ib@9N\!^/ZblKT7H8I#3"!rs8R
%iY_Hs*\bo22!s51\pB7AaRGI;D)P_m:Ia8B<WfO'jO9A0*4'5nRZ;2n`h\h^+?\,@n\J'7VjnZd$(."e(]57WMMYo/nUD/eTthh4
%AX6HfP73fl27-ccLLbWr_'0j<b/t@2FqkS^-#n/e*5O,ifW7*/Q`WNmXL3UCX!)Mhbq&&bef;k6f!X+SOZs^l=BQ;lc1C1']VG\H
%R?/+qN"b%ZNu@N:S2289]Zq27"Osd*d^Dsfq'89.VNo6XYYR$Mc5MR0;DSFJKRuWP[ZWpOf<,0A^*X>nL*Keh*Leq,+J1.a9U"$H
%_*hDbNd?$G=@F7HRUb$n](R$qng>Y7/$!YmV5>c6'4sO)nc\!BR(U#g`?'9[dr:*LHumO((f8"f`a"Us&\m"\a(Dk0Ag%5GmQBGA
%EB%YX+X2ih^l0f..)]&+bX*9oJNr73<s=/i?l#r&Vc[dVUG[oK-sMDPXSE(HKNSs3bZi#"lRCC5b?3?'gNYfqA-?XY2,Kd^flX@`
%@nt+H8B@^,m%r>8"Klh3S0k[*`b;<KJ4!.@bgu@DR3[uUPn'dfN'nm;$O_G"OhnE8^mhjH:*LY]4F`N&q$?pZ>rqd0.o-S+e&#%b
%VO#Q^A!Tkm^6#.tJNeu'YqaL;l6sq!_cPErf6Dj2)$*rE%G7O=S$$6tGdpnqGhNIfP,.I8#i'-c;:]&Wb4>bBmc_/Yr-/9m,7S'J
%'#<I$MaCY#S+TREBaPHTCDm8GVkjp6)(q/<a*_a#'Bg/e3#*FL.VZGp,mNoc5pWQ#7^2<KA8IK/dLiQ,QE.*$Vssh;18;:a)T@E@
%es$?H^k%L04#S"<m#$H.O015be\fVe33INn_?6cI_Z]EP1I7Y'Y8<ja`$VogakgO',qL76bhYiUJ6=JSm+;U9n/@t's4@Yap#ogo
%69VB(-Q#8mRl.,)GSjMDa*cLsT%(h[(?#sM"D<a+/*ko)]Z?_(OKP[>FEO13WLD\<Y:M*/M(@-=o2`B?0eNeCN99o/Vgnhd0n'N\
%?o/[M$N]J5C]HCM++1p9PS>hmJ5o&W*mc-GSrst*Q4]qo@Tf/%!i9UFUcD.3`G4]VQ'^X5OG0%`1r6C28TWU3MD`O3Q?DRQefLJ2
%,IFMOU"u[dpMoLO:!rIBXp&b#_5)6((Aq$2*K)>=J6si8rb@I%"5i"/$]!LsV.d!%OWp)^7$[mX;WPb]&rHrC30Y0Z,9];5CJt8m
%5%=f#Kr8$I4WBeVH<Ke5kpnP/oiao*VKkm!`>W8)bA)B`(\<h&c;ca\giTROHU2"]U6$YZLJX'#nU_:Enrea*A7fu&Z5&<0K6e/]
%&R+$KN(>,n)Vf-\B`'^&%Oa>q0PlF;*3YlOPa'-lghYgs<_LVJ9JM?9iDMRYf<Ejl->\pudSm4rbZ7d!BtS,ON6n],L2Q+;GrYFf
%ADEWpNt]p$RBCO+`)%jU&c#@;L6=Fb"@lP6L5UG<;-[qU&+^&J4Up,/XM>+DC7+NS(U<VI$/ggIV.9m>)o72La^_HVh,CD0NfD:+
%I98JQ6:k+.FKQ]KF<9%:5PppEYUj@nIE%39aU$:oRLnk.X]5_`Lm?!tHVG=XKQG7r()-(E<oka&!$3iYZtE&GL'f(SAg%MjN?q$5
%fTIdR_4\sm#Ti=t+eF:R!)\P^,fD4IG#]+9N>pn8nJ&%+A$e_QS&/2L1=gi*SU8pU(e;S]lRCC5b?3?'gN`6Q)1bsk%FhEBg7TRa
%R06,Es'9U;Gs"8\P;Hu$B`Z2sh`N-3RNY]Is!1"lVD5Dpl/mO0L16H\Vj*d)HfdngALn_a/Bq4Hddl$]F..?2e^cHYUC@.4$DG*h
%Vhms'1oIIR=JIEW=k@QO`W'J%CK35sRnfB8PHb)Hgie@cct49:j_u4D^N4eOHRAY!RP7Z9nA*^#c=1r_%.mC^QC=KcQciCugNiLY
%M-s][[1c??=,+]Xi.&(nNl`2+OLO5'@#YWV;*^9^UPt6$[kkrXQ$)IN?FWd#E)otkZT=MW.BL<jk(TZQB(U6o]M"jY@DnB-L4GHY
%CYgjVAgH]*iu0i`_;-iV[R7'*+W*-!a_#;c##DLQ]jjHE\_q7)"lVXT(9`Rm=D](R29IJ%EYV0^RN(V"-AaKVA#HH(328$7=k@QO
%`W'JeBN6oZX/@K>P7T1H8][Dl4+_ru]O`mCoRt'iHBp'=K5SeHr?NQ8Ic\POrT/mPWa/&8">*c.jW`KXHu5^TU`q_b[8k$TXHJmm
%>#Oo05=nDQ>Bt3<,`1b;<_5fcQ<:;qVOb^7pW86<WbR2F9;cQK.g3Vh3RbF)h'SSG9DmQFYGHS<Cf[e]UC-.YP]RG=(PHu6&5L0L
%O=1kglk7"0:f_J4h(]Q/F*:;`'ngqQj/gkN;lmEfd2HShcW0&[4&&J66Eh$)XeRkN/7Vi7DWA_9AAi1^2,9X!WLDYc\gX\^6tp3Y
%8h95%['D;V.k=J#=c(SL\gX\^Mpfa?PZChZ['D;V/*iq:Z4a"!Ppic9MpbY\D63M.-R26Q:3i()<hm%-&uCkY.'9R?Bk:S7<`Ys%
%Z4a"!F\u=FNRGsAPZChZ['CUHQ$#r-=c(SL8sEB-7;59HCV6%,N$rO(ohemqNRGsAPZChZ['CUHQ.7:bX@-c6,t]\g;-I+^d`P1H
%<`Ys%Z5TR)eL7Q$6tp3Y8h6r>g<k'^0A7cu8t/S(PZCh[['C=@Q'Ec"X@?o82+fAhU9nqd8h6r>>$6j5b"@n!<hct,)Pr_L.'4JG
%d`R\#XfP!+8)%[h.%cGHD*%>e>$2Z<Q'Ec"X@-c6?'JC@7;6<Z8h2Dh>$2Z<Q$#r-=c(SL8sEB-7;6==PZChZ['C=@Q$#sXC:fHA
%s-"%k9rC0I/*iq:Z4a"!Ppic9MpfbZ.'9R=Bk8S_/*iq:Z7\a".oBJQM:0PX.'9S/d`P1H<`Ys%Z7\aRD7B&pIkmb*l*NrpAR1O$
%N^RUC8<d0+7;6==PZEf4C#qmM<n9]RAR1O$N^RUC8<d0+7;6==PZEf4C#qmM<n9]RX6h`M\5,SY2P'[mXfRH/b"@n!<hct,/kRY[
%U9q3=V3R;oXfRH/b.9"'X@-c6,t]]RU9q3Y8h2Dh>$6^1b.9!<[GAi\s2g)FVGeS5Pr2EB3?"`ZUJY2t';^sO;-GsuV3RfQ>$2N8
%Pr2EB3?"`ZUJY2t';^sO;-GsuV3RfQ>$2N8XgHQ%iBA,Vg2uVT['D;V.k=J#=c(SL\gX\^Mpfa?PZChZ['D;V/*iq:Z4a"!Ppic9
%MpfbZ.'9R=Bk8S_/*iq:eTMlbr[/p_RneBr<n4$:<hnoALBn&8Usu21<d!YheS'8>24>RheYPc:Fm5%=BR42HRN>V^V+:4o"R2'!
%BR42HRNC.O';S.$[b"W$Y9tPUX/A-EZDpQYX=EIs",]ZB*&.6]aJpjUZDs]j<gE<uW\-H?W_8DS.d<'q,sAQ69961>dNa*5CbfP)
%Xf'[E8$9;TGk"!9O]q]jO<.QTV+4ROoZ4%q*][X#l&etOH=U#IO/shqO]>\5A6"s;=]NlpX%I\K<L4b0eYPe0Rb2/l?<^4)8WR+n
%\+00Bab\g=s+9maW\-H?U1D=h8<4`e9Nkn*QQB;[UdnINoZ4%q*a.$h7ojcsOVK00c@Y]0!QF>-QQB;[Udt-)fOW'0=&5fm8$9;R
%GgS_n;-j--O<.QTV+4R]l&jM0H=U$B*a.$i7olDLOk",kA6"s;=k0?=<hnoAeS'8><L4b0eYPe0C7&hY?;X4k8WR+nYONfd1?,k@
%^E>\FW_8DS7aiT_dIbM[/j6M?998FON]%i^Rt5lP9mU>MQQB:hVFO[^l&etOH=U$B*ndT&Z6=Q`*MFfCEj`U#Mu:\QjQbu*O0%Wp
%,HFF_A5u3^XQn4YX1IrEWfeE+<RN+m](F(D/j6M?UdnINoZ4$b4gM(\O/shqOhJ2p;Ni04g2>s<!0\#Lec,g;O]>,%A5u3^X=EIs
%<D@dM<KeJ,<RN+m8pY#JP9*lWUdnINoZ4%q*a.$h7ohM3O]<\jZIdT'C=4>.g2"@:T8]GGr\$g'XD60.X3pR\C,A)ZW_&8QC=4=3
%l^oMjnS!5Z<KeJ,eYG]9UZmokBR42hP9*lWUdnI\l&hO"N_ko\\^F75"oMnaFnL5MH=U$B*a+K"7olDLO]>\5A6"s;=cK:K<hnoA
%<F'o]<L4b0NM]3HUZmn@?$^$]QQB:hVFPfe3^R+ujD'%$(\s7,d+/."l&eou(m%[L;C:Jai%ec(l@e/m$'+0l+ibbY0kF`Iq)9`r
%%Y6j(EWd\lGGG5Z"P:^L<Z<QGX.=Jl<Y&%a2O`er=dmXA3UnL)`b[-n<!Wf+Ugmk$81,o,4RnB^L:d^EAs6(u92Dh$(r!<0:1M7i
%2Aq)$X;]/Snu3Pj;]*^Y<>brckl^X4G8LEnc@Ob;V0NbOn2uKC]k!-8k*B0tN![Tm1:R<sg].aYNMM_hZpH,X5obPg+XLVANfd-k
%n65Z<#ksKb]I'4Z[IoKu.+6@@+UcfTF@`Hhbh57bXf#9r/7Vi7DWA_9A-?qZC*5I_>#(>uTAjH"V.HI]8P5OEmK)g_(Dsa%*=NY[
%nW_7NFZ^m.">\;>%j3#6pVWd^ZTWhlBRlSpG`4!fSrg2_a%#i*I-iC+r27UJlJX0m=3kPR1AL#^AB&p7r3ISFK6]T-Z`9$n%C0e]
%?(6firK@i3c"_j?M4CaIap@<8V$.#Jo3<5a#G*qnB#2)_jF#QU0VDu@Iqol/Gj@r]'*o;h,CGXE+^0O5$V:B=TH;p#+eFjl&Et'*
%L,rQe^'__A^_jQ;GYL<>C?las;5B\`!g!k[.uSlm+p#ci'Tq"u;lii^Z)h`Mnb.LT#ioUJ5VB^+j]&?riWDl=_MpQ0R8&itHN6%S
%3C\dCCHrX[n/V\pQD0I<^fWGA4>1L]+<e71+9t]rp&G_Wlfpoj^r60R-mYJH/As9/%!K4*<DX2SR)Nk#.99[!BT+]0J?&Z`PNJ_I
%YU38PJR2PVYsqm9ZEE$'gB/cITUXI7FQ7c&jo@*_</M?G'JcMeCalm/\]t?^8nF0];*^gXBGu.c4Me$,0(:DD$Gl><=isrrh#nA"
%d3g]krA6I+'J.0WQ4.rJG#b3B9JDCV`)EbGNmSb6]%JP5g8+O60I`<^?j"*NSmm\bN+H;,NOK-d7US0U#'M:PTMsAA?t'Ae0W4B1
%^kg3u@!LGlPRcfP0UjnZK;$*EWlQEhN.=[uOk:./684J$:@1GJYn6h@O&WJsUfg5R.9MC96tof@f<,JG!/apl-D"\SFc=m"dfHrc
%)7/J&"0a*r@fsEQSmm\bN+H;,NOK!`7US0U#'NutVe[q59GSR>#o/"-d3s%\`e,<dp]-cBV+$NPQY\'q,E<Lbad/'t^)4n]2W1BU
%i(l4<hJ&hfP(b1>Rt-!_B[TO?49\3''&jb-#=uRP<DX4Qbi1MM'W\?GZppI[<3ARKXSE(HNEHpWZ@Q=d:U*Al`j2c'`nLSB,JopM
%,J5L#VJB7;.anU)-Gjgt0oeWr`so\=!kbnYk6Y``dPBe>BECI*',$s\"4n_UJlPZi8b,jUeP8U7:m(gr7&WoGdY]Bqk?QeBmg)r[
%_dn`\GUEMYPH#S<8uRhfN`4:<N"LfDXL?H"EBY7kh5hOI<CK)W>Bk*C\lLO,GKh(\<g7/,-@g3,&&Y5A,abFP'#9@Fngs?J38R7@
%Q9q2`Y8:`dG7E8_AO0iP"5u^9*<G?9=L2K^]L/[*:qd!qPp^[Pd&Z+2<`-nLbqYUK$D9W1?%[H(,:c<>=4@h`3L6eKCTm7PIkh);
%=Z*FQ.Qq'A)Doaupp=hjcj?=I7&%n::/Oq%CL!VF-s7^O-t!/`ja:Z;j#S=jaUpCTi,o-Y.18G9::-\eHkI&g1^e;^,Rr5EdKs>\
%`<I!4-.!p1(i::g0oDd[.WAjSLP1Y)X9kIa5m+g/Smm\bN+H;,NO9#PP7d*)/"tfZT<@S))IMbJ'*mQk%sY+-Ilnm.LGgnM!hSR%
%NNArj8YVu1&Ym.AYkSGH3m,f:OaP01U/uVpnR(dMZs`eJM+Br?*g"@CCmG[0TpLA_XpUDj'4f2d9gT2&lPY[Z#6.p3H7M%"]!3S3
%7KXP.XKAC&UF]nXf5BWfs($e/o9rLZOAkiW^c7K,'SS+>$^uDB-3T;''Pr?dh>meWKt'#^0]iWY`OM!<.#e8%PeA/,&.?=d0h$2l
%&`P5Wj3BBF%!K4*<DX3V@5ol-TS]RKD*=XKMKH1)-r)D1\lh`Q]JKs&;Hn!$`>W;*bIVj9D\&4oE,T%lpEjUG9pPIVm67+@i;uY\
%H2u/MEQ\^o2=hO@mKbLF<*9p>iS$fgn4t6+]8O_f+%2p3M%'CDnNKfrLm#"Sa%5ta]6IQqKR_KLAR5sE0WKFW@uru@=((dl)"b-U
%Zt?(XZtEZ-`L:<TbITSN0D[%@e=0N,]a6%RRP+5b?S(E&.iqj<)#O`ri]K018l?_k$mc!l;&4N!Q_P(.d4ZmO#romA+,r]SOU0`1
%/E2?!:Efj47NrgZaY9W./"`K<RDE[t.99Bna7^A:PC,K</GLWuf)cU?TP7_2:GMQF^9XWL`XD^dM"'QW#d8cFk]FB7o\S0k`=s6\
%#l'QA8P2(H$RfU"lM1c.3sf;HAPd.1>Zp!K#Y^%DgEPGf1n`n\_t''$ni0]W4omlX#-W`Y=A9g.Z%qtWnmtEcDZg_^M&R8X1p<mV
%=F1H`=jp^;"o`$8G4THV(C-)e_EGQX@lfL*(M:Yp;`d+KNKI,o2!KI$o[@do%94)XnL8m*'0MI&9e>:&qY%84'B'5(Tq=>"4-#JD
%:"NE$@D-%Q;n;p"Wd,**hOpAaj72uub`fSX.G,3,Rf@*/[iAsR]8RQ`P7b:KX)V?;a$+&j=on4QM+;E&2c`[n>F`q!\9sk*Ascia
%;*`62prdWXGDpdi%"!5H(54$$rZKe?,+XB4\>pZP_@^]3,bX3L`%_n_F1uftTX67Y(9`Rm=D^3r1!0KgX,rK%2ooW+ABY7(D*>iV
%AJr\&FrP?1R#JOl?B*^V95qK5Yi.WscLH!8*jt,5S/Q!X[&]`6li<Z<OR^2\j%;&*JkGAj2bD@f6RJ4BClAM3K:aGL6GX9c(J;hZ
%^:)GrpjsBR$BAMZZs;/p',Mbt(b*X^F)"6t.-r)YUSK7S9.X.Idn\p,r+#qLo4e8,B(9t[<5>aYk%&25J1%^&:;9/o2./HN6sS1P
%BbXB_r6*O01SOt\2R"<'k^!9lI<=)6SlccTB0[Vr3>*9-$Ei2>Q9;`k+qL[rjQ!*\W<5jW`G4]UX\f<#>QsPZ^q0gLX9nM@'&p=l
%'PiqE/F2#,]KKXX!kES6OK7A_\rnep)8SX\bd.kD[P26VCm'gWC>=Ec&LU)r7:K"<1*]IY1HlV,B+RW?I`s^2H&G@Nq[9&"&2Aea
%-=VM)B-C5>cn*&=OXum!`\R-#O=\VJR18Bm:lMQ;d?m>M>SVeYJi=>HMI?EW&I#1<JhtKPQ$$q%<qI2l&]?9$6/6Rn(@Wc38r5fP
%/Yq=#Ri"`AUumc@O9rs.*@91FNWR3/nA7aU&Lo%/5A-IRHlWJ@,6VZWOs+Fj3/V;kNj3,fe$Z6.U_Ut6Kpi,Y;itQH7N(if.O8eI
%FCQKX`^n>pPD+7=1WhD;FmV(nr(fcn\#9LNj#ip9c2%]_8tel7RanhOi--t+CoJ@FWamqSJO(rI!_.,/V!e=VPKt4il;rTn&jgqr
%0Zu"F84YuHs%:]B^bD&_G.MisTJXju+t4:C2$k^$>K:E91-L/gYZYIqDQJZrk8s6=H>Pga)J'f0\oo$2&"&:uDG_(cNTG8YSjd<C
%$-sKATL'!So4E)20]cg/EL-.AlmRQ!4J3W_R"T2ank]f#.JS]hC9ia?VEd[]NrDU>)$hZX$4c9fp5C;M*Nk[2JpIFZrM/to<g/W^
%g3Q4uPj&3R"_J6$=[p%NpgK"aF73XV4iJ=N)9]U7)fH7SN'M8X'?Co7b%:VZmC;)ID9O)iUTZg+$0F(aO-q9@&>:M0.,a*Ea9MUJ
%a]5O%fDuBa:rY<H3_tP^MND40TOPH("7dWO:-&CtmcV.Q.YIq&dW;Z>#5.nZR$dQSTJ&9S2!r&%8pZ)o`,_,#m5/.b:IY>nW!72S
%<D8h8O''F#>kA>+n<Fm])2r3Q.+QW-!fECq#)mgp#j\?Y&<`jeC!MBqQ+:TRI[WC<6aCV/),N("Op?rB!BFJu.L>j5=hH)Q@^Ylf
%`[EWsjsgqp3@B(CR`M!.o\+VK29I\?FmV*D*\\IognG_/9sX$[ck[g0C]55(*^_.H_ZWi+"1ffqPG;YH!L.0=mD19j#tbaG.?_h?
%T*,F)>euK0+lGmV5flQKALeYYG\MjFlkL?2)L..id]k6J\B5,E3N6d:cPk_r*&PfRkpaUd_cBgmBtSDWN50=.%IE(0fQ>AYEOA32
%r5i29BL%@Y^D5)l@Al$+m$;aji35fMi#Q=Q\If848P"H6-)i@Fl:FNu?8`l%U[MrkOFUdQ/3(Y45u-%7$:93a/7&ucZ.aLnA!Fen
%<roNPbmjMP'<0YMYH=^)UF]nXf5BX9!L",J/ZOA-O\AnY')F-uk0/Pb)<[NU-_i=M7s53brlj^qU#j?77?SH&q8A91WQ>S:('nWT
%UgM<P5;VH1*$p6,Y,u494<DZ9Q(+CH290.42b5<65d8K;mOFRuNDdN7Bn%&g/Orsm0&m-1A-?q2C*6TVA@ce6+F9^aIjUMB<tN5'
%)\*op[2W6MMVu`3!FtKAO(@r8aT<O>_n-]KaKhHO(.*75YlQ06g)X\Fi.cNPp/M[`ZUV+fI&tf8;lmF!;7lEE^'[P-Lj(HA8JC;;
%,fFKa.Fooj=Osn7G^I5:"EKE8+BN56?"_P$Ooe]Nn4Y<:,_C=B&]m[2U4hJX)CB1faeN:qS2UiV;:0MmjEu$d&;^Xk,_\c7H'j7'
%3*)?#+.^1\ZDNco6R3Hm<$i_jPloTj2d6EM.)'Eg1Wh,3&ulq7fJLKLf!XDfH:%)mYgpen0F<.NSf\GVam!!aTuT^7b-E4.'N1E<
%OE!n!$o+%*pWl26Y.'1F)(%6tTLe<."!lY!CQ'[s[SRYhK40Pi"TjRWg)ZsU!gMci<l*2scANHO&l=OqNff<1BsnB1nui4c8<sj$
%lRCC5jmoTTgMQlXs#q<Oh0;,?8+nf6=&bO%S]5mY]1=BS4SJjrN:Fh9^&V+uj(^i2g<qB[c"tCI!XrE$U>VLVBuH4S0hWZ&8Ie=T
%1iTOmJ\3K%r48k\jag\@St?IV#tS*.a-t`Kq*?<iDd**q8(62p5:>Dh%S>5._ckX!hf%]dP7cf6kJ]u!!&nr@q>tshQmi93AZGR]
%$;ieo0u!"j5E:IiGp3^>n7!rA-sU\`+$,GX[Y5Z?+dM,mLOug!P%5jYDeYl:.En5jl`hI^P:QqG"XL.Wj#-P`*^N"gntomR-&;r.
%,fcr+P)OgL\#aGehp<f!,O-5obE5Os9\]H<BZ(4+a9nN8r?)\L1Q?+jMuu196&.J]bhP.6#VkrrN>'%nH3EXp!$Y!S/pg-OXFT=V
%Gr^=.'L.LeCY:C@+Yb42djClp`h"u/h^7p%Vuea_nelVK%2&j4mrKD&'P!Qk/8O#/2tVgG#RJKBC:GoBa`I^(4NM)bT@PhT#'fMm
%[)1?[S/,kpl97TcA=c76D[+*m0PSTA9Q*ZckO2F_\;1M^<0X-qD^7Ci8PfK;O'CHrKYFLB4%.p*@M(((P$%+%f@X`J"P"_KeuatN
%,n%pZS?'`3*KlA0Njl*,a5>5m-6l!=)l&0MKq,;u@"e20d7GVM&d`ah9N[_Ci@*PK'2gU>65+AL/cM-V'a[E,PLQc7d(UI7<\.A^
%:MPf8Qt06I*,fQ,YB#^QL=W8CE1lbiH$oaOd5g,)>5g7aL]Wcf.Q]XLl3QTB,fV>TP)OOD\#aGahp<Mn,DmJel]D[>:04k;!kQa(
%&s84dBD*o#)Rpk4Tf&$u?4rQeEH_8A'0dK(<\M:!_=K0$`hY\!clkX`&M'*/qK8Tq,!Z0jk;Z*:r(M])<ss3Wh8%8E?5l\F)@)eP
%1><hJ(4:O@;?YeV[)"AjA"Jge`Z`<'juCQ<pA5;i@57o,nU*7C)>&"SgBcjo/Yn*nfY/9nI#(`6q?@i"VfdY$]^.1i9]2RSKmtW"
%Ns*fM-_0pm+I*4_H4m,,JoCrmLIm)5GJ'aQ4NpZ>-/8aR7OGKcMKj_MeM8"`/H"`;^q.VIe=iMA^`J+0]W)"OQt.)XC4#m`jA/7@
%3M+PeO?[%*.-Ns/(f\I#&3j11lo-YD(:^qRn<e,cG\f.D0*Ym^4nRIC"]C?/9>%2#9*"%K&T1c>YC_=l`'Y5$Sr5C._e?k>0F2Kq
%@//bW2u4;o<Q1/l_N*.bAig#nZB->L_l$RJ+d)C<O1`IUa]R\MbI[EE%:*Bt6I,+K1#*L34C&2)BRik^JIr)t$6=,)83%@T!Y3Ga
%Zp$kj[%9J"SC@\8((0tW<\R5j60P%Qnmo5f+&Ydcb]/q\lrTTMJnhek8C#<C'adN%m>s?1$/tuk@6PleR0$#R'PER%HA<b]TOTV?
%g[]QAh^7Ak0u`$>El=g'217r<]>0rqk[L?"I2.B,_X&oe3NdgcPUoDt-t&hjSW#NJ?1Bs/$GMFC_b_,S+H`@MnLbLp:aFZ\(eIn_
%R<+(c@Y9L?og"^k@^L9:`[I#4WfVV[k[lZ6V?_B`*Q8n-(sBL6q]3@X18<.B#=`lG9\Ccp(=3B6Bbpl#m5O&R1a5f^KXNca)$)=^
%jFVpE(c)/MM$[Qd$Eq9ujLYV0`0+X&5T6;XfRP0VG/m/%n,ia!qnlBadP,j;AJ&Sg;N/&Ed26FU!F9=tCIigX-'eu:NA_fA`!-oc
%P[c91g?j*+K#n9_@j`,LN)<:#nOga/`eATk90ha>.+X,gK/idC>,N`43@#@#G'hfaA[+SGcug*OI+Nn.=>F,*73N&GP)ihO4[jDi
%Nj3-=93fV`<DZ3$1H9X7he<^$=C'7?\u]8A$=+p)fB>[T)AbnB_4?h/"r(R3@k?qLmWWc+aTsn:7i9p9Obd`+TGli\hkH?eX@6Ro
%JH0Z95(s]j`$cm]0;'N8Q%R%fFbZX([#%++bk;ELL/^E7b`,-rEPZS0Po>sO;,5jmN*l]Nigk6VE97'XCM-e/"f.%gS/1l')V0W-
%:2pFCR>l+#Dkk$T.;RZ"G9D;h!m6=@3P%C8>pDOB=C`9K/MP:pRMi&VQ]NN+21`&OL89baB84'd\mJ#:Gdmm(i7p/qj/VXB;j]>'
%'^(D['H$aH/NdOb.*i$NQu*Q@I;hVC/co$8`Tlb,NErC`:_bJ#`'_27j"sUMI1ocGrV_7UN,jkgD;5#LXtU`%AF'Yu].8d'9!IM&
%/dmk3K_n*Y3QGi`V(t[p9YhaCZp<V2F&#tLH:!?p,Xi7\de3h';))]N?_FeDg-f?U!Y\cQSuiDDmjauZ+?<Z:e&)d!Wh.I;A9n8V
%+>(6#0-D$uF#J-<W$`F'**ZS#B"t)O9Le([q`m3R)Dl"UV7<6j47@l/lejt")ekuLD+r;3`C3Hr_Gf\k7Nl][L1Ae+,V[SNdgMtk
%/.QY0;G\E6V^5r$n.`3`iu"a;-pG!\_Y'a1i0Tf%5S[)"qKg/#%EDEki,(c(9hum+"L+gAV-.X;MD<7.QF1T(48Qg)"HK`?N9m;N
%l'-m^&`QUepAr&PQeU*mpu$-md&r%d(WnlI=(i5q3t,oP:l2VD!A=Tlf6/oc<`MP>$-CEgJ6#PL8j]pI^60Y3bHu6ZW>id8]F[Z-
%L8S-Z4Wg/(H3%>MW(gHNc"N4^K7+i'V?)D<EI;>'S,J@"0GtI5liJED-U]\#Hg:[_%Ab:S/&D2Vg]7c=)M!?/BTnm[AFRZS,F`*l
%r18:@Zb^E.CkB\58h?PZ$1fD,87XtW\7WWJcj.'1-Q<5#"n,r?ofIb*dI9\VNkl(J0pRWM4;EUV`9d-f"ChQ*Ph#L'*FPLu(bpVj
%AA\O0K2[MIF8U$/2P@%6iLV=WQm<\HjJ]%(#td'!,0q2aX0eqf[,3G.k:t@+amgkr7KW#O:IO\6k"TWr&)u_+a)IS_Jp_/?83.J*
%`T_(SSNS<gJ/'U\=eHHZYomMV"`"tefFl5)f!a1KJA7J13&&4!A<V\:\s&Kf*Zq3\_(gCi.l1s,$1@Ohm,$4.G=W@Zg)Vm-8pDOb
%#GCS5!_aI>jaDUoPGco$I^MD5R*_+.6tofLf<,JG#T?i4<BS7clPQ1$@9a7`03It.+=saY#lI6,e:,4u,[&#)DcttL^S=Fq:/H1W
%F+g'h>XV..:C=FfJ6[Y8Ukr3OMGl09b+=]V@nIihQ*Eg[fMKX2k7J+8N?i/O,t38J'@O/fcSZ?MncV\b_K18Rr!Yl-[U#!e%AZ:0
%V7d3ZJX#e3`Y+ADV<8[38D&?q.Nf2FMQDu$?nHA'APG8b%bOQH(g'c26;6(6(ZRWF1,bp+_Igu59]7,54!-011do,uP@r'D^e'Xg
%h!uR+(@n_fJKH<\X_PYm$N,p7a!L8fUkT,jPr(h<)apC*VXEq$*Z$Nl;\t+n1:&0B=I=0;8Dt,O;9TWRmY7X@CRO(2o#Z^XMX"f/
%6r):Z^49Qda37F"\%6A#-,"hCf6"i;Hp.`&.@E>?mMNbHOGjX*+ts+KN56c/W?MWK(CCslKJj+O>ZmAS&\mmALj$V$:-.B?)$*bC
%:G?O0/n5=Pb;.LgNZVD8\69V(qGlJ-7oi2OYa.8OZEC<Y#P'5ejst1i2b[;1;1Na(S#l_.,Z.pa`;#];&Udrtn-&Xr24bS'>kk:5
%MgFC7\.@5&)->%b_>bg1c.q`2`lsI>,]jPi7`=VTl92s3kdcWeKQuKP!R&=c1A.PiNWq.qIdX["_6K4^mINET4rI4';;L.QjA]P.
%r)%dD.uJ6`Y\1J;Qh0VLZXDuF`i0Fb$b'fj.7Rj4!h+D^coT'YCfVOX:[JFPM$,/WL8Q;5Vh&)@]/]rTCA.kC6u$tB>>V_J'o$u/
%qiI[iPtPFG[E:L]e_fk\Fm\c^^ciXp>>a4n+Jp]`S;"5d<K'&+]T'Ia$N+u]mKud0'a5;eA0s_Z0Z)$g.5FB)!2ge1+Va?tU-]0R
%FTe4NOFcG=9'9e,!VaX-p5Z3Gpib(OP)-AjiH=VmUSd30`XqE<]!RPGgp7>Ca(#)^a*:Y5&Zd:=X/p*;hgt^I#hFmu`W[fgCXriF
%.02foWe<(Ia!_S5mV*Jf3Jm&Mp(4<:PdnYp1%O^PL4nR'i)PmB5Zo:."Lp-6+P!&kQWP5/8LR+!?909;N9K1+7SV(fN!Yeu"FrNh
%E4%/$N->T`f4L7h"D`kS.dPgRG9DAj@^Ml@9ju1.$AOY>"UdHY7ph#oj@`gK9C,PF5V_RQNfe>c@3,\@^8-UWJDtQPBLY1hKSUmb
%\CfmW8&0&q@:Eih<>*H0V'GQ]L^p"ae?iK+(d^DZL]5aN<6X582C]tT`r4%0km5iQa&U]ueaGd&A-?^;Fa&F0VJ@62M]S63LN[Z?
%i8`sD9aMHr?Ve`^Ys_[6EoAJ%\6uP\7)IadM.0U,34gKV,g#g*@fc!VmE_Kn$\em`01U[?lLh@cm^H'@nlR]P)]I+,m\H6(Z]tJI
%b1WE4!6\6j[*NXj]:=iLXJkP^:t+OZj)PB"cPH(@9%tQsm($8^9IWsgSHJVEPl1%ObEs,16G)6bqaA%VT/>Y`8_TRMM=u-+F!=?%
%Jlkg(,pUotOm3t'C1s$**K50)]cd4meCMAWb`\l(ck2c_NifBuVr%OOaU#\>lCNYcShef2\"Tn]`&X?rJQGT[,<i5lLSTT)W')dn
%)_Sa^%H66"0H3-^/)IdgL9P/(c5hH\8ra.]T8a+H3Q\30!Q?H:Z;H6ZJ.%*I+$=Zq,f2)G3@u8j)rip$g,AgK?!q])Z(lXWdcj@2
%NMl.ljVc(h-"]/i/l7'o/$kJXqlr\eOH:7r-D,<p=[Q\V1E'pAM^WCr1L,;1CpFI1c6tYl'aY0pRY<^jJo/``XpPN\-HtI,#q8hN
%^h?Cch+SQ/Og*t;2\M;&[^D':,9[*,)!)UX\lS\KSR=3^[;p@Z68E*o9Ys?!aqOUU6jCe4&&?LBC<9h5^loh2J4DCP-Z<Lt]HM;'
%1<C/L\Bq2YR:6agT&7=^IY^FU&Pt4uiY\Ws#e7lm4k_Ba"%[$DM?FWgCVXU7,2Gp-)'2j\[W<?]Z92dsS@/I;)!)UXRPt$`pn*M$
%XfU3VOA4=j1cj&:3P:t0R\EpXlTt1!LH&!P:V^)0U>>9m$bmH"F5$df6AERE3jChu6tC;Wh]G2?Oc4gRYn4rH4Wrj%<sA6sqE0qm
%_\8!+!Lp@7i1EDN4NXa;@I[,K1i<akl^Y*Y`L,^'bF04D*Vc7c+Khg6=:fMa[Ofd.,0E6&a-$`,0^C:Rit<fdC@]FZZA'j)Lcc3F
%5%]IV)RDuT\b#b39uO3N-W)VdU]JCGImCgibasf5DZ[=932+(%idh.3`TS/COWC52#u>X(I"/%[RL?RGBc0ag'ZX6Tg?<b=I59fl
%Z=_QP0jV\F66@h?'W);WO.?C2iGG27jspq/P1]_&hcm&#ntc%@UWa4I$1k'FAaj8aKfjY!.3:OlF77n26GXic>KQXEk9oj9TI_7:
%".X>.7R/\c3l_3'\uTPQA]LqELAh^1d_gJ]g[[iDPG//1"%aX,k!:&l".elL3[EeDa%MS,h-GbG&uo\gpX),sQ@5R_/k]NVfs#$K
%"Efb8]28?n+]NYZcL("i7&OS2A$K?A3<)->\`mA;ORf`X(t>l*E\pYMG8mt1S$n%'G'ZkKh_a]S$jU=4lI\o<;*aL"2%T.g%E+*S
%>ordB_F\oJ@_fmnqA=h_T*/VH3/O)=5b!l35:]=CZ.8kW8ZFc;hrMW"8t89sA\d?=@TU)>4n?/J>ff7i=X7h>[@+<Fno9DGOL-;#
%iOCs:#iRWEm;$KSIgoB:!u`=*YsXTe-34ErbBnc'"^Kpm]Wp?4Hu').nVk9onT=bH"0hZ(7[OohTQV6tB&aD^@\!WIAk&lW$h%Y]
%:4Z0\@)l`aY42C:A9?;2Q@\>-MAc86G,#1`!o1#F/6>3A%SR#c,\%2Re7G<"\"OP1Tn9VTL59qg*q-Xc;A*Jh>=]km(l'_BJisX/
%(m)GGaCcFng<uj[@>L,GXTl-MWW0;fJFkFQ2dNg:e=cCPeiJX_b(.NAbq=eP\jr2JSSK-aHIa\'VQ$=2"In0`^2L+#"q_PZU$n`C
%B=p1smI(&5NDOA96)ff[a#<CIE.9(EP"'QK9lc]OiQXpqS8?'plZ`0+]%Q81r;%7Z$Ih6AaUAYN$$:9KG'1_m023d'"qH4.@6fk!
%Fh,B.muc*ok=UL,/8i_HDe7A02d_l:B7.[dG31Q2dW3Vd'7aO,e,f`+!jc-h*c^X.<q#qO_;tndlG&sRBC4I9b'jh[;\5[^3`'eB
%']ej^cAl36?kuGX0[anu'ho&)kB@GiBpY:Y:,EAX92.1=A%6$R<`_9[4]8iT>g6+9Z`*S5&N1uu$/k^l>X)s^:o$/JI,+ok:[//n
%m<V=3]d(5^mX`5c9],8Os'7Qa@41=e(jRK]Z1l`*R8X"Mr_;.5%P+&;%@obRO&(YHqt"(ls4\R^^C`r^1T_Z1S!*l6eXBbU!r#:I
%ITA8Sn??p;E-Dlb$"seSPR@@bO(q-`#]QtN0AmVV%TY1%K?coe!d+iA)R+2\Q4WoQ'G"<[<g'9smM'?#BV;"I"<eg@oha1%)#uJ0
%$eS,XbE`etrMWO@dW*6bkV(%?0f*kXF=mZ<XOcYDhnMYoQVKsXoW4%#(u7fGO\[r9B?-@A4/`RddW'43Wc5=+=:Y]XEjL[H=2pAK
%6]8K%kPFZjAqk/,iU/mK6tTu#!Z]YKSRK=dosFgX%D]-=).@,NJK!f]3ZYY%#H6i@(KB!?US;ZCQ^"MD;kVSofWeV`/"HV\)-f4(
%0Z<I^>sGfg_XU)]HEt]M#=fQR**JZ$;@bK];Pj2L"7C?tLYcjKUi*:fKcJ+MYII5*7JT&*.,fL-?cu$0-nuj"5aBYR"GacF&@9;H
%e63)NG#E'BPX],m"p%q+"p(W)lQeM?"!4Lc]-7[OOk?L!+iF;\%dmcGd2tD#i9jk`8kj3o*40iUX>k0eP0,^i?Nr&@"4T[M5)k5Y
%!_,MQpjclEIF]%<+oop/f5@-i(F9:H)d>:-jA$CM"LRjrA1]<.9:SDP25![$D:9YK$V#t^QK5X#"O1*td7G5F=KU<m@;q8A0:hDJ
%;L-i[!Q\kNJ,MdPT&90"$F2K8Vm5!!'&Afl&4Hm&?Dp`:8oi;H4l>\`+GZ])d`9)W8To@e2BYLUlCXbe%)Gf&"_*cWM-=[[S!6AC
%%mf+r9VICn?mYbe7=29MCRmj@A\_f`DHB6B4Yj]m/p*cYXL`$8mt=G6d\]0XWORM[!%F]aFPA/+4-m"ZW5(9SW,B&K!ZJ6?/M@E,
%5S6"q>k^^B$$7::^l\tF2^mt\T!$f#qf`&L':_=H1t7m!n#Ad&)D:t?0*kC9C6V:!,Fq)3@]3eA:02]=4`\2WY&DD?=ZjmcO6=rp
%a<r"VQoal;>X1F\.L3HeS<IVN2ZkBe\G>ZRUq`a0m2*71Kp%,$[A\n4j0=ar).tl4AFFI-fnP$c'GWASE>#\1J2Sj+WYB6SOu]io
%Q<bjtX>Pi/b(.NIh(AtcI#gZKSP'uDHWDm%]EI$%.\LcoOM8?#P#,lu54h*$F\8*mXV_UuZaHh1j!IC&46HfMhsQj[`[X[?G!Ii0
%86>>6G6%FSH]ZQ3"G]8TLfr^_C97MR;MUd;ZBB_p">q*++O_dn7,"_"M+u-Ca(jG5#_RILKBZY0;"Cr1[Y4WCcX]&/RfmX77mYK7
%!YRPV.;6T[@45ZK#"&mU7ArFia]p98fRm<sg8'<#SgR-(&sNXAJ/eY:T5=joJR-G1e;u+U;[kYIUB)LU.FmX8b_d&+B(.Kr#])O(
%FY$SZ$K&Tg5+'WL&2cUdqqo0Dj3AY8?Q#s8E;fdVk'b1[Hj+66A!6gPg=;n:=Fk-H(pqd+LQo_F:LA7n9i,B9$O$aIDa=>qL98l8
%i&E,@V\Fd9lRRH)WhG2i%l+T]U1*0!fj*1s<W,#@Bp@?@VD,)L1JM>")7X1]<`_9[4gMkF/qdom_ihfX)_L+HUQO"rm/+<S<1A!U
%iZiOug>r$U@_'ML,?aXk:&anA,miH,OigkoBRWQC)U!YM>hZQ!g_bX\!4T7CFJa;F)Ea]O1S80(UPbdZOlj"t&;d,qZAI_n%!sO,
%n;<%3:N#s6/u$m/h/JU-L*4?'>NK-o:<,X<eTPN/EY9[OEkj#t;'9I?m5ueh:uf@F^*-Im.9&Y'LW!8>EE@0QWb=12Ziqb;Z6>mC
%qqWk^)JY+mW3m++;qi,jPn'[.=Fti)d5J(KOu0O_2Uh9/>nI>98/(/bNPqUKLa1@nE"</9^Ft?B#r+A?*c+N-BbKOoG/37q/?*-P
%,GDZ9ZA,ijb(mnObg?Z58ufJU!-/?Ud:Pab#S_iW,u12c3Zu!&e0.Wh0uHpAW@b0Z@BGaWU^VLLf'S>+\4;E90.J7hp,ruKDiT30
%s33P0^lSc/AT/lh)ip1^q;?e8;=!6Z;g`?7N=m=N`C_TeoC2jaa%DktWTt!9#=4R"2?^B1RfJ7IiZr9@"/`&7%+3[>C)`HQUchi7
%YguBf;?f6alZP].g`o+TcZKlHH8CT[.mJ*TT*aE%A@X/@6RX7qVP)pU#QR-G65J/[pb;cP%c:Wg]0PoA;*$!VfF7h.%&T%j>jsZ,
%'F[)+`*aXYm;E*1_rWrKC60)3!usPNrsC^!7trsplPuMh-u\s9::QdnNE0N;DfFEq2:b?`]@DELGAZ_e\S592OPSqp\&:;j[`!@@
%;hEc4X=_Yf/+?ro2MPU(f56@IiZr9@!Gta4`LoRpXmTso/YPe:D-6*L3[k.PX*)#u#4@WBc&4',8"K+<G:2nQ.8)JGdhcP8d8)58
%D)rt;50U52$)(68j)%RSW-c#D1kUr#8dIi].EPdF/")QnI*;dW]YBLNTIg>$$qm*YXYlbG9&GeCVSg#'#Xet@fG&Uh'dZ4VP;;($
%>.4lkT\LdHRhnL(c[)q"qA7/[Sc>]0"Bg-pfi*'I.;:Rh`&5m_EH$kt,EEP0gEM!erY<UqZoYjB8B,Y.!>"^EI29j@;CN.6<(ia7
%Am!.+eX2Rc.Z/@i!NMI(;FZ2:[3i.M)=Ub1gD*"nO'HTeQTRCr!_f\A2M/l\^"HHZ(R,Kphqo\r\<6p(=NoXroT^&cB627i&'^KM
%iRI_"Ss#a"M?`,acncseJqH<odO]C$Z%3cXS(&TOUGC:rh,[6%#pkV!<bkE=P;;($>.6#6i#YJIHnKYg(:aq_\h_@,jMePaILk3I
%^E;0j49$P?bM7U,nJ+:.2I7jXK0[5&IrUt[Pl2SbrAo:M2.]%:TQM[[;6g&BD*V6&)+Ybq.oOX=+2u;V9V/T(_Ir>"YKc5sKkKf2
%X1mA_T85Y>Mk8))$iWQuJ4\g4Eg*\IH1RQpG'b+iipOo*ojD\X+<iP_kCu>8BUl9PG>9(F_t3CoH?_DDR%e#eiG:RAi]=k:2.r8E
%nKs\PO.pJ^Cd&%c<\&?IpYR2SRhsT^cZ9&[`u&aaGh_AoQksULGN)$epRg)$\a@#+CYgALmCR\e41C?,dLT83;Fq)R0Mp"P"LM`]
%^gW*:N=[qFc-0h3hLU:5_@LD`[?6@c-C\[Dc*56/"g<`;qrDETCDEF`P;fT\*7?3e6i(>481OlL=thq_-\DML1-!X4_1>Vq%eRm$
%5bAGpZsn!I"bQo*1-!W.K**\B*6r>BL$.><2-ZZti/gtJ%dB1n+al+*U_SLaXV`&APJMf6)'!>/i'8ds#PqtMTMGas=tr"`MSXj-
%)'%k(_1>Vq%d3Mr_YNY_OtG!mE(DJ`LNI!E81+UsZsn!I'nZUZ(`_bXi'8ds#?iiAd##Si:(.W>@W7tTK*.Y]*9b?!5V!%oo=A3>
%#5:[QQKL%`U_SML3\`Ui'8&YU0f[O;_1>>i%Wl0!TG<(]XV`&A`8Em."p\<d37*Q!JPHU`FCK3^'naDLh6%$9HXq9Biu&ibMSUI,
%(`^t\_',ot*,*=L5UQa@3\`V@MSXjE$k@AgE1dks"0EC[BZ8mp-O'f:0f[O;_;W%E(IUR&7p<AaT>;[&(`^sOK1#KGE(C?@#?if@
%cmOGJI53e/K#*!R$kDpOi'<nC%^]V_TETrMI53e/-\DLQ(`Z<:FG8?(,EH'#cesmc$kDO?i/g\B%V`o?OB)c"FCK3^'8$Ch(`[5.
%i'8Xo#<FS!d#,Yj<X]I[@W7tRK0rfs31SUfMD2P1-FZ+0_',ot*7B\[+e9GidYbjaXV`&A`8Em."p\<d37*Q!JPHU`FCK3^'nZUj
%(`_bXi'8XoLU:N033V'O@;q:gE-XX"6Wu0'Ue_2MoZ?$Q<X]IP`Sa!/"p[1D37*Q!JQ<0hoZ?#VT*u4:?uVbBK*-NW37'%*6Wu0'
%S6"q_hnMZr\3-A!+Y=NNdYYd`SJ`EqRDC&;)'%k(_1=cf*9bW)5\C9+3\rbBM8=`Y$kBXPE1dks".^8KdXo<oZrU6fr]P;;jnT;p
%C!#:pc3t3Ibi"R`$k@!ji'8Xo#<FS!d#,Yj<X]I[AoOD!K**\C*,*IP5\C9+3\rak-%j*E"g<`<qrEL(cJXep4^jRQ!cD2r,D'mD
%,Lt!Q#@WPSMsDX*miNOR9)mWJg.9r\mbD_XE_q&)U'-/\)d97/_Fg>oBLC\YKJr8.=N_Zcg2LI(OD0Q<n3@J^P@E9gLrN.*<SO_\
%jUXI>Zdq]i;?f6alZP]:g`oNu:GidD=U1\>9mi%n*?>\O#jPL4-n=0O0\k0H'%DYE'/>'l9T`U*NL#X)^D@>L_c9)k%0V):FNf>$
%DL8NmU<OA]a?cJiM/3G-Jg:o6`(AH^#Ll>MD)t)P4*g6uoIZ3AQIOJrJnD-KkbJW3XOccr+Ljq)\=RI^6@IEH0eic*6<O=\QR`Pu
%rq,MP_8=tM3P;3hQX<>TAdW>%/k^g^qLC:j:'i-N=@^=Z9[*(_B-g<I4gtj@6(l=P)hN^8!&>"O!]ANEF@$lIXJ3(220WY&C&N$X
%8Y5d[`(>&C#!>q%G!u\l,=,QNFV<qAgEG;"-o1!.1][BQhi7pkb&=^42nW/=h\^ReG#$]h72c/S9-&0e12'C9"ot\PI>?8.BIa;f
%X)J\..GYu*"/([k$m'rTIg7)j/"B!ZFYKBsgSO1V,I(D-?W=CgWQ@)LW0e3gO9(F6H<oJ,m2gQ3HEN9aqnjKTi@FEnqB"b^#N">s
%!%m[Z5aG][P>p43)\ALuOZ!80""V3"]P/C_D5FLC$*DI#rtOgo_I///HG^?.%00ZgG!pIr3(Y1/.+"j0QK\t1?(:6\G&IUbGF>&U
%l6JD:"!4LC]-7IIOX70ng5)!ZUXEZ7h5UE7;q1R#L98O_\4er"HhW[Pl+;e#o3nn4Yd*!oU4h14CE>ba8cn\r]6jp@Ot#'QM#e.U
%nRDh7!tpDmiZr9@!Gt^Q#-9'Zs4/l3-)jq5TNUS+3[k.PX*)#u%.96(Y307#$I?<R$i^uW=?c>4,[leK,"\oT*^]U9'==sF[Ja[@
%`5aj#,I!pU>gaOe`7RcPJa\B%DIqaSs46tRU^G*bNkl4qFubR'")nNF7[P&lTS=B/VW3`(]"qErD.^^Y4?#'<$?S<54'(ZiL&9aP
%4'^*#&ld&\[R,D#]9.8[$q]0dpKdA,'lN?<V]AO,B/9bQIW0V9&!(-Fke+FgnLgmJ.M44J.E6Z21F:ZU6&>V&"H%T8+eUE(!\m?<
%7'/>>9hL%gQ%YUFno&_EKGFbS6*o-6FA`<*<pOot(u-?5>gGhO3Bc]r(q$#:#2OIu$L#gKdRm!b6/T!"f+d/N'&2>ql-ITA.C)D!
%!=s16$3TsM`eXP(:>Jk$qcUb"JC_&#)#O<8D'hY2H[_,b*sPDiRV3h3`?@6pNil51<KCd7Beg\bE!UOu"*9u5k6b#"7qT9&9-Wr5
%DMd<e03/bhoZ,pVom'na#bKN2S\#9jS6o4CGJJbX^C5oBRU!up(#K<nmJ,6+*+enl8*%Buq!+@5b3fb9;h/U?N''r+;_U`"o?be^
%?3FXo9ZaNfE&J_2,k0u@O,%G9RdijeL)?eRR`+>u^gjc]=8;eYo"ap'),]t2W^:_*KC=`2"3Tf5glnQ5[-Nc_r/J%QR6+!%j6hcZ
%M^3q&@d%)hrqG0D"PtQ-`-KTeM)W7A=W*0NJE5"4%DYif?T2b?FuY?43e91:T20fh1bZ1/;aQNlkaC!3adeS=O6+Mi&IJ3R"FjH?
%eF9O`Tn7-(j@[QGBA<G5_RNSp1"[/B6V]r%8pNF![:B*>ku%8:h/\^m7R;_/F?it&KTlBd8t;]5&d,EtXhM.c^.$ZthN00_;[o&[
%i8+ZO\C_X/=(ZV@(q1]TYnAG3.2hVWXk=FDE0!D+qlGP)SlH2M%+C4>&Ln+`k*u;k6EUs(i#n`F%mTXp>QaX(Bq=,,$6%'7bkJY>
%7Jtk<s"4/mh(J'W,&i6$$d*gXG;@_+,31Lk*WLne;;F?#3XPJ)<_uZI@iit&k^TJt`%SOErN&poaK\p@.t%::);hkNH:X)Xl,flI
%kKE%]8M3>RT&EWl$0+?fbSt5Yg:%5Z*GE6#n#$>C4,"VM,eJF6+(?N2cIIes3@f*4.S:,jSfdXnr>:,LT+j%3E>#\1!QeYLD2<cf
%I_E+,Q5!TojTuE4SO=i:^gjci(IZ)gO48)0f0+e"Ps)prL%>jmMRF*#i6*R'b6_oUoQ$,k($1&K>MjSI-t"?GRLWXjp_><1+%H'&
%7#@+,;.@=.**t$,`t03o73H3!PGkl!W0>XX?mW?XdXSSK[k&1LCRmj@A\_f`DHB6B4d*Qs;#l`M'a01g6'S`U)BmI7(@`,8@peOI
%<a)9&r@@"B!)Z_R[8N"hD;1#VCT=tr&Hu+]7"rJfnafFQ3P0a(?T/@_7'/;5:5*O_jjZFsN_[h#jRIImAu1^T<"sMGfBEX/^IP$-
%Sa.<UZcX<4S\b'=HoUKcaOoJ(&Zr8]MSQ*bHY,^?fECV/XeU?k8nb`AH9Njq[IbGs4SW'9P;H-G^r&1D%0:<c'8TfN,\jF`lD2r0
%=\0O7XV&?@^imO-1i&XM-Y:)'[;K&6_*.A&m9K(@iko)J2n;&/IVaClJLG3fM^%a6J8^>>![[pq'lSR9LmC<dg8uBMTWQ/BG72/p
%-/^(&($3KoUk04,d=W>>*oc\efnSE5L]T;(S4'J:TM<QN+iWm+j0#[j_Yn:)6*o-6FA`<*<pOot'\jqhgWie0kugFcE,W:[NY8K=
%9oj<FHF\HoFuY>M`u$M)/hIAS1E;.7TV4Cg'n*\-Tbt(A9cn"':9ocj"!6Ikr7Qh_-m62f5:gde[FTjd.?+C0'%!Y42B#H.8j]Y+
%!Ie/:,W[@V*ijFq+q!b#$?#%$#7Ae''lKe5FKj%tW-FYhe(WW'$FI(GTob<RUu^GiPiaEGN0Co5VUY])4nsP/;H>P!6/0*jO@)9i
%cYWptJYLu*eW;4V;[p02DKF96gXJ']5WK?j)MV#'2Z!I-'MkcPL$RV@$f'$-&G3&J!VC0I)reJXjh+4u"I!9R3:P`GW3'UleRV8O
%2^E,k!sZ`Dmh7o"MnLFRUDbV'^tZtdNnrlkF:,ThAq!pMq;Ma%'RUtUg$NtaQjltLlnk5,7m3ILGfSn3;D[0L*2sE@SODXN^gjc]
%=1J8n;SVU("Hg0Kq1"RfOE\JL&S-q6!<&Bng^&T;I":WR=opUe+R2@<aCgCeGaGdbXe)E)qketQfYRKMN9lf13=`'Zc.ETSQ@aFU
%RGpYMn:]N>Ht)IPrh5I^S^rImLJH</'@!Kop/nKU'`i<H4Rcu87"//c7-3Qg/TP%0A`8N!O=A.G?m&GH?6\2#'A/qL,[>=(R3ds%
%2=?n]A3+k?"FuTUbopLA:/Zakc%)mta_)RP>D,[fmOW>j[FTjh.Fr)u,dCTk;bN9MYrc_q@Zs^JZ!+Ue_VcIair)gd;4c;G\Dk=C
%U@:G/=ITH0-J,t/D\+B[RZk,"Nb1O1q8YIH+@gNa!T@jaNlF[0[e<95NKlI0R/G@BAH5lfhENdsK+7p!f\J@%/Fa@\epoe1%0@TF
%icI!#!#6g4iYN&#;)0FY.0CWlFh8b%q?-LN;=IF2Z0flK&dAS:p]Zm"`/UQF%bK+uJ1IS1!L<HkP!-eRE^8\lZ[E^q&pBI.@JCa>
%RH"=je?k;ko=0tu;.@=.>eYaFc%b.9#QgE[GR7U?J3#-="'/=8q]&SiYbWBXP,#rD>O*Oq.0CWlFh8n/mZAdO(Sqc7=a(&-i4QHd
%*g@0D3=_9S1G^,obPb\V*c6LteY@,dO!K1Let^'6G0*'jr>CflOT2lV\Y_V%EHBuoRqhYF4Zh3ah9T!g2F1mHHDV\FqO;pi8\#q'
%3)Q<Gp:6f<$48dolZ7oth]kM$T8Om[H.6>rT;]9l!T'HM=(Cat']).4i:9go,ZT$9%bSLOj=2GQKp?2o0TAT'm\.J1Q>:/Ta6t9R
%PSim$0BYtV2?^Y+hXra!S4'K%5b4.N5:aQUp2NC</>6*7#:Hq18T[i74BCck8Jp5-7D,6#-,NE<apXShU\@1+)tAV8QqO,@,ncq$
%&_+"OoDWd7-JdiA$<RIKo0tk?WXc?,NAj-lFA+t8'a?ai]A!<*",.>!`Y>AF%]7_&#[eCHbo?1b#23MP]G4@4Va..iY[b(IQh^SD
%P/I1-6mBW`AV[O;%1/iTj.M&'5CF,g!`=*U*3i7:KdkRRrTT<5O<e@BbBOIC;1cNqI%1](@jOmEV`+h@(s)8.qNIaP"_*cWM-B4q
%rq&[8Lra\9nJ\Kp`'uLJZdq]i;?f6alZPi>g`ntpT8Ot(Ib+0/3&jit#Gs]6YCRg?!!=<c[.JC%.VC4@LF,K%6p]sq)GN7TI_,]V
%Lu+9SH[o*U8RiKi42ftNo?bf,YRA7JE"]S.iFG+j!Q<eN88S9KLI2)j,KKNYX)J]>O5Z,<H<oP0pIGnbkN[lUfBl`/O)p[)WZJKg
%Oi6Jh='MEsP08t^TNS1Dfe%1N8!/c#[VITQ]SYSj"=^I+a"cFBR\kZ?`bs]'C$:;G\B/ZMiMSpM*117?gSVJ,Xk1"t>EHsoI8ce[
%&Bo,tRnFb"*m*@=>RQ[ceL_1?E:,IQY/j]VkCO(4cELT!pTOSI:j-60pm"02ftdZ+JkP,THqubHa-@E-lL5+=Bjc0YqU/T`dP_7j
%FA11-O*(A;lIk9o+O#]l)3u2f-D^G>*oS->1JI1\F+71J6qqe:SWEl5eXBbV!r#7cmcSm%oON;J%%u&a2ads#$:)1YK:kh\\Lo0k
%-[2;`-fB_J:Uq#g%/BE5G7/-QqAJi.d5&)]q7Di(]#oQM(;nbDI9so)*"#9+e4ilS8.D.eS!hU"]gLH6s1_hti#Ok9'hsm_BM?[T
%a)V>:$&SPTJj1b0;L90L3iMkbj!`A,a=.[2Q*SJu.f9MXe!g;eCN9j5O@\IK'$WJ&67.+=E*\B@&O(\9Esj@/gl8%2Vp^;5,((Hc
%^I9K"BnMVJSIQIs&8:>VlfgHi+J"jekl`aXZC\4s[CX6L_`\XJnGA8-M"IdL@eaa0[l\f$OS5Y]C#J@h$4H\?iUqhrD`h>9`L?r!
%$^/a:>$?kj#C@0Y(k$<SHOP'YlpI;=aEGOQlMLL)N53T)mSh=<-P/WS-*q#SVOk`iiVI"PP,UH79k"c6i3?Cf9>(9GBj^T5ch`EP
%m=sQQg_l%)92H<%n(Zb@7@0r*UHQA@OS#7;bMhscN?\Lt!kD4s#H!Ls\J%G>RgfKa-pPnk$OSC<e01F/T8.U@Zie[f%8NX@)GXn>
%r\+,3=KGQ>#e\pcH.CM#dg=$!'QktXl4W!h7gbW3s.e^bX3W6uKicHOFrVG:i<3mh]uF#"7I'&cODt02"4f+tq`_ZbMssSC5E8?\
%"4<KDC6SMu]FbJ7#>(%%HikGLm95^T6YH`BEJn#[,\jF^F]'+[,_[2bNg.a##^M#6XcqtE%!\l)m?0`E7hV0k+ak-B4mY61/5T%j
%#uZa$#@P.$%M5qjrB\5'km9_DUM<ZA._qssL&&4nC;fO"Kqdu.SY1cGK0^:\4@?&gJ8Z%N_Taa`$nl!U-VUG5&\omCfn-=I&\oBB
%6)HOKFTS+o_2d&l?/knY8-6-tIo\jgpor@WF`$OudGukZqt$&_\c<]5+?Ob1m&B*5"'4ZuX!,8NLqPn#iG,Fs9h>`@:lS+$gCKGk
%8dor(J%$R\#_G==-!nFj3M9,>_a)om%hDar=@ki>!u!M,SO=i:^gjciQNY/gZG7Fcq3*`)=a@6oICP*/`rll43"Wkk*f(14Fs\+a
%!=i;MbJF,@NLl=ZDR#K"pkDm>@Nt@i4qAB'TSGH142g%PF7b5[+UVbIi<3VgKDG*X*?_)l)-27Q9/:DS[p>jh%!;WBNkpb+H<h-`
%pW*GX!.<9^KY0H_/&Xq3.-j3LM2"2s)utEaZ1X)si%pEFUn'!7md*Dnm47P`cnUB?Lf9L8B*^ao`84td/\@V$3(Xi2#!Bi]q6LOH
%6')4YQ8j_)l[V#F%0KWD\qc@'/nR[g9dXQ)3f-VSJB)E\/d[2XjG>l.l=YP;ZO2<L\;gq@9VoqO.3gY6T]!>WfDHL$p2XG30[8ga
%\EPZQNM+p2n'5rli3!&]H'sa!IKp<W:dp)S%e4]@4S5u[/#SH^0RjiW-\dTBb*8[X?`tF[$^rg]%27pN3fehP(2J#Kcefs%bWaoJ
%ks?Kb(4\V^N-uZC`i4^+"`usQ:b,rR]9<dOMZc`4Rsl:^0RQa'[t)C]]]cEI8G;6PjAk]gL]eI*Y3fOl0fBnAh7hIue?e%Frc4Q1
%9ZaM\!louDq0@X;h]2;DVY<$`1nR0mRHc%Y+Tidd27k+<mZ@h<)#1%iLtf6CU@Cq?>OTeB^pt_NK"_UXR3WRfi&'7_+s2PdA2rb1
%hVd"eo.9s(2br,hp91"64+S`a%!K^uSo;<g&NCF"Sco:eAr2k1[2ta^3O\A';?$TBjpU%=.GEi\Z^U2*@oe=HQ>:\51rKcC_s6ui
%]DV\uTDr76jek?Akn!$.>D;[]D2`sbT>1E7"9.HOo,iG]kC<=,l+_`Ip&4<1hu2S2^\n#U^]*l/J,8umhu;c)^]*kt5JM[Do:J%g
%s1SHal^(t.rp,(3jk$,3J,SD7rX0?h%.LmdrVdo<m^Kt,+#LIp\c~>
%AI9_PrivateDataEnd
